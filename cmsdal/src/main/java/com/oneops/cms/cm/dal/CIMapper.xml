<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.oneops.cms.cm.dal.CIMapper">

 	 <!--cache/-->

	 <select id="getNextCmId" useCache="false" resultType="long">
		select nextval('cm_pk_seq')
	 </select>

	 <select id="getCiStateId" parameterType="string" resultType="integer">
		select ci_state_id from cm_ci_state where state_name = #{value}
	 </select>

	 <insert id="createCI" parameterType="com.oneops.cms.cm.domain.CmsCI" statementType="CALLABLE">
	    {call cm_create_ci(#{ciId} ,#{nsId}, #{ciClassId}, #{ciGoid}, #{ciName}, #{comments}, #{ciStateId}, #{createdBy})}
	 </insert> 

	 <update id="updateCI" parameterType="com.oneops.cms.cm.domain.CmsCI" statementType="CALLABLE">
	    {call cm_update_ci(#{ciId}, #{ciName}, #{comments}, #{ciStateId}, #{updatedBy})}
	 </update> 

	 <update id="deleteCI" parameterType="map" statementType="CALLABLE">
	    {call cm_delete_ci(#{ciId}, #{delete4real},#{deletedBy})}
	 </update> 

	 <insert id="addCIAttribute" parameterType="com.oneops.cms.cm.domain.CmsCIAttribute" statementType="CALLABLE">
	    {call cm_add_ci_attribute(#{ciId}, #{attributeId}, #{dfValue}, #{djValue}, #{owner}, #{comments}, false)}
	 </insert> 

    <insert id="addCIAttributeAndPublish" parameterType="com.oneops.cms.cm.domain.CmsCIAttribute" statementType="CALLABLE">
       {call cm_add_ci_attribute(#{ciId}, #{attributeId}, #{dfValue}, #{djValue}, #{owner}, #{comments}, true)}
    </insert>

	 <update id="updateCIAttribute" parameterType="com.oneops.cms.cm.domain.CmsCIAttribute" statementType="CALLABLE">
	    {call cm_update_ci_attribute(#{ciAttributeId}, #{dfValue}, #{djValue}, #{owner}, #{comments})}
	 </update> 


	 <insert id="createRelation" parameterType="com.oneops.cms.cm.domain.CmsCIRelation" statementType="CALLABLE">
	    {call cm_create_relation(#{ciRelationId}, #{nsId}, #{fromCiId}, #{relationId}, #{toCiId}, #{relationGoid}, #{comments}, #{relationStateId})}
	 </insert> 

	<update id="updateRelation" parameterType="com.oneops.cms.cm.domain.CmsCIRelation" statementType="CALLABLE">
		{call cm_update_rel(#{ciRelationId}, #{comments}, #{relationStateId}, null)}
	</update>

	<insert id="addRelationAttribute" parameterType="com.oneops.cms.cm.domain.CmsCIRelationAttribute" statementType="CALLABLE">
	    {call cm_add_ci_rel_attribute(#{ciRelationId}, #{attributeId}, #{dfValue}, #{djValue}, #{owner}, #{comments}, false)}
	 </insert> 

    <insert id="addRelationAttributeAndPublish" parameterType="com.oneops.cms.cm.domain.CmsCIRelationAttribute" statementType="CALLABLE">
       {call cm_add_ci_rel_attribute(#{ciRelationId}, #{attributeId}, #{dfValue}, #{djValue}, #{owner}, #{comments}, true)}
    </insert>

	 <update id="updateCIRelationAttribute" parameterType="com.oneops.cms.cm.domain.CmsCIRelationAttribute" statementType="CALLABLE">
	    {call cm_update_rel_attribute(#{ciRelationAttributeId}, #{dfValue}, #{djValue}, #{owner}, #{comments})}
	 </update> 


	 <update id="deleteRelation" parameterType="map" statementType="CALLABLE">
	    {call cm_delete_relation(#{ciRelationId}, #{delete4real})}
	 </update> 


	 <update id="resetDeletionsByNsLike" parameterType="map">
		update cm_ci set ci_state_id = 100, updated = now()
		where ci_id in (select ci.ci_id 
						from cm_ci ci, ns_namespaces ns
						where (ns.ns_path like #{nsLike} or ns.ns_path = #{ns})
						and ci.ns_id = ns.ns_id
						and ci.ci_state_id = 200)
	 </update>

	 <update id="resetRelDeletionsByNsLike" parameterType="map">
		update cm_ci_relations set ci_state_id = 100, updated = now()
		where ci_relation_id in (select cir.ci_relation_id 
						from cm_ci_relations cir, ns_namespaces ns
						where (ns.ns_path like #{nsLike} or ns.ns_path = #{ns})
						and cir.ns_id = ns.ns_id
						and cir.ci_state_id = 200)
	 </update>


	 <select id="getCIbyGoid" parameterType="string" resultType="com.oneops.cms.cm.domain.CmsCI">
		select 
			ci.ci_id as ciId,
			ci.ci_name as ciName,
			ci.class_id as ciClassId,
			cl.class_name as ciClassName,
			cl.impl as impl,
			ci.ns_id as nsId,
			ns.ns_path as nsPath,
			ci.ci_goid as ciGoid,
			ci.comments,
			ci.ci_state_id as ciStateId,
			st.state_name as ciState,
			ci.last_applied_rfc_id as lastAppliedRfcId,
			ci.created_by as createdBy,
			ci.updated_by as updatedBy, 
			ci.created,
			ci.updated
		from cm_ci ci, md_classes cl, ns_namespaces ns, cm_ci_state st
		where ci.ci_goid = #{value}
			and ci.class_id = cl.class_id
			and ci.ns_id = ns.ns_id
			and ci.ci_state_id = st.ci_state_id
	 </select>


	 <select id="getCIById" parameterType="long" resultType="com.oneops.cms.cm.domain.CmsCI">
		select 
			ci.ci_id as ciId,
			ci.ci_name as ciName,
			ci.class_id as ciClassId,
			cl.class_name as ciClassName,
			cl.impl as impl,
			ci.ns_id as nsId,
			ns.ns_path as nsPath,
			ci.ci_goid as ciGoid,
			ci.comments,
			ci.ci_state_id as ciStateId,
			st.state_name as ciState,
			ci.last_applied_rfc_id as lastAppliedRfcId,
			ci.created_by as createdBy,
			ci.updated_by as updatedBy, 
			ci.created,
			ci.updated
		from cm_ci ci, md_classes cl, ns_namespaces ns, cm_ci_state st
		where ci.ci_id = #{value}
			and ci.class_id = cl.class_id
			and ci.ns_id = ns.ns_id
			and ci.ci_state_id = st.ci_state_id
	 </select>


	 <select id="getCIByIdList" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCI">
		select 
			ci.ci_id as ciId,
			ci.ci_name as ciName,
			ci.class_id as ciClassId,
			cl.class_name as ciClassName,
			cl.impl as impl,
			ci.ns_id as nsId,
			ns.ns_path as nsPath,
			ci.ci_goid as ciGoid,
			ci.comments,
			ci.ci_state_id as ciStateId,
			st.state_name as ciState,
			ci.last_applied_rfc_id as lastAppliedRfcId,
			ci.created_by as createdBy,
			ci.updated_by as updatedBy, 
			ci.created,
			ci.updated
		from cm_ci ci, md_classes cl, ns_namespaces ns, cm_ci_state st
		where ci.ci_id in 
			<foreach item="item" index="index" collection="ciIds" open="(" close=")" separator=", "> 
		         #{item} 
        	</foreach> 			
        	and ci.class_id = cl.class_id
			and ci.ns_id = ns.ns_id
			and ci.ci_state_id = st.ci_state_id
	 </select>


	 <select id="getCiByName" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCI">
		select 
			ci.ci_id as ciId,
			ci.ci_name as ciName,
			ci.class_id as ciClassId,
			cl.class_name as ciClassName,
			cl.impl as impl,
			ci.ns_id as nsId,
			ns.ns_path as nsPath,
			ci.ci_goid as ciGoid,
			ci.comments,
			ci.ci_state_id as ciStateId,
			st.state_name as ciState,
			ci.last_applied_rfc_id as lastAppliedRfcId,
			ci.created_by as createdBy,
			ci.updated_by as updatedBy, 
			ci.created,
			ci.updated
		from cm_ci ci, md_classes cl, ns_namespaces ns, cm_ci_state st
		where ci.ci_name ${oper} #{pvalue}
			and ci.class_id = cl.class_id
			and ci.ns_id = ns.ns_id
			and ci.ci_state_id = st.ci_state_id
	 </select>

	 <select id="getCIidByGoid" parameterType="string" resultType="long">
		select 
			ci.ci_id as ciId
		from cm_ci ci
		where ci.ci_goid = #{value}
	 </select>

	 <select id="getCIby3" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCI">
		select 
			ci.ci_id as ciId,
			ci.ci_name as ciName,
			ci.class_id as ciClassId,
			cl.class_name as ciClassName,
			cl.impl as impl,
			ci.ns_id as nsId,
			ns.ns_path as nsPath,
			ci.ci_goid as ciGoid,
			ci.comments,
			ci.ci_state_id as ciStateId,
			st.state_name as ciState,
			ci.last_applied_rfc_id as lastAppliedRfcId,
			ci.created_by as createdBy,
			ci.updated_by as updatedBy, 
			ci.created,
			ci.updated
		from cm_ci ci, md_classes cl, ns_namespaces ns, cm_ci_state st
		where ns.ns_path = #{ns}
		and (#{clazz}::varchar is null or cl.class_name = #{clazz})
		and (#{shortClazz}::varchar is null or cl.short_class_name = #{shortClazz})
		and (#{name}::varchar is null or ci.ci_name = #{name})
		and ci.class_id = cl.class_id
		and ci.ns_id = ns.ns_id
		and ci.ci_state_id = st.ci_state_id
	 </select>

	 <select id="getCIby3lower" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCI">
		select 
			ci.ci_id as ciId,
			ci.ci_name as ciName,
			ci.class_id as ciClassId,
			cl.class_name as ciClassName,
			cl.impl as impl,
			ci.ns_id as nsId,
			ns.ns_path as nsPath,
			ci.ci_goid as ciGoid,
			ci.comments,
			ci.ci_state_id as ciStateId,
			st.state_name as ciState,
			ci.last_applied_rfc_id as lastAppliedRfcId,
			ci.created_by as createdBy,
			ci.updated_by as updatedBy, 
			ci.created,
			ci.updated
		from cm_ci ci, md_classes cl, ns_namespaces ns, cm_ci_state st
		where ns.ns_path = #{ns}
		and (#{clazz}::varchar is null or cl.class_name = #{clazz})
		and (#{shortClazz}::varchar is null or cl.short_class_name = #{shortClazz})
		and (#{name}::varchar is null or lower(ci.ci_name) = lower(#{name}))
		and ci.class_id = cl.class_id
		and ci.ns_id = ns.ns_id
		and ci.ci_state_id = st.ci_state_id
	 </select>


	 <select id="getCountBy3" parameterType="map" resultType="long">
		select count(1)
		from cm_ci ci, md_classes cl, ns_namespaces ns, cm_ci_state st
		where ns.ns_path = #{ns}
		and (#{clazz}::varchar is null or cl.class_name = #{clazz})
		and (#{name}::varchar is null or ci.ci_name = #{name})
		and ci.class_id = cl.class_id
		and ci.ns_id = ns.ns_id
		and ci.ci_state_id = st.ci_state_id
	 </select>

	 <select id="getCIby3NsLike" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCI">
		select 
			ci.ci_id as ciId,
			ci.ci_name as ciName,
			ci.class_id as ciClassId,
			cl.class_name as ciClassName,
			cl.impl as impl,
			ci.ns_id as nsId,
			ns.ns_path as nsPath,
			ci.ci_goid as ciGoid,
			ci.comments,
			ci.ci_state_id as ciStateId,
			st.state_name as ciState,
			ci.last_applied_rfc_id as lastAppliedRfcId,
			ci.created_by as createdBy,
			ci.updated_by as updatedBy, 
			ci.created,
			ci.updated
		from cm_ci ci, md_classes cl, ns_namespaces ns, cm_ci_state st
		where (ns.ns_path like #{nsLike} or ns.ns_path = #{ns})
		and (#{clazz}::varchar is null or cl.class_name = #{clazz})
		and (#{shortClazz}::varchar is null or cl.short_class_name = #{shortClazz})
		and (#{name}::varchar is null or ci.ci_name = #{name})
		and ci.class_id = cl.class_id
		and ci.ns_id = ns.ns_id
		and ci.ci_state_id = st.ci_state_id
	 </select>

	 <select id="getCIbyStateNsLike" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCI">
		select 
			ci.ci_id as ciId,
			ci.ci_name as ciName,
			ci.class_id as ciClassId,
			cl.class_name as ciClassName,
			cl.impl as impl,
			ci.ns_id as nsId,
			ns.ns_path as nsPath,
			ci.ci_goid as ciGoid,
			ci.comments,
			ci.ci_state_id as ciStateId,
			st.state_name as ciState,
			ci.last_applied_rfc_id as lastAppliedRfcId,
			ci.created_by as createdBy,
			ci.updated_by as updatedBy, 
			ci.created,
			ci.updated
		from cm_ci ci, md_classes cl, ns_namespaces ns, cm_ci_state st
		where (ns.ns_path like #{nsLike} or ns.ns_path = #{ns})
		and ci.class_id = cl.class_id
		and (#{clazz}::varchar is null or cl.class_name = #{clazz})
		and ci.ns_id = ns.ns_id
		and ci.ci_state_id = st.ci_state_id
		and st.state_name = #{state}
	 </select>


	 <select id="getCountBy3NsLike" parameterType="map" resultType="long">
		select count(1)
		from cm_ci ci, md_classes cl, ns_namespaces ns, cm_ci_state st
		where (ns.ns_path like #{nsLike} or ns.ns_path = #{ns})
		and (#{clazz}::varchar is null or cl.class_name = #{clazz})
		and (#{name}::varchar is null or ci.ci_name = #{name})
		and ci.class_id = cl.class_id
		and ci.ns_id = ns.ns_id
		and ci.ci_state_id = st.ci_state_id
	 </select>

	 <select id="getCountBy3NsLikeGroupByNs" parameterType="map" resultType="hashmap">
		select ns.ns_path as path, count(1) as cnt
		from cm_ci ci, md_classes cl, ns_namespaces ns, cm_ci_state st
		where (ns.ns_path like #{nsLike} or ns.ns_path = #{ns})
			and (#{clazz}::varchar is null or cl.class_name = #{clazz})
			and (#{name}::varchar is null or ci.ci_name = #{name})
			and ci.class_id = cl.class_id
			and ci.ns_id = ns.ns_id
			and ci.ci_state_id = st.ci_state_id
		group by ns.ns_path	
	 </select>

	 <select id="getCIby3with2Names" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCI">
		select 
			ci.ci_id as ciId,
			ci.ci_name as ciName,
			ci.class_id as ciClassId,
			cl.class_name as ciClassName,
			cl.impl as impl,
			ci.ns_id as nsId,
			ns.ns_path as nsPath,
			ci.ci_goid as ciGoid,
			ci.comments,
			ci.ci_state_id as ciStateId,
			st.state_name as ciState,
			ci.last_applied_rfc_id as lastAppliedRfcId,
			ci.created_by as createdBy,
			ci.updated_by as updatedBy, 
			ci.created,
			ci.updated
		from cm_ci ci, md_classes cl, ns_namespaces ns, cm_ci_state st
		where ns.ns_path = #{ns}
			and (#{clazz}::varchar is null or cl.class_name = #{clazz})
			and ci.ci_name in (#{name},#{altName})
			and ci.class_id = cl.class_id
			and ci.ns_id = ns.ns_id
			and ci.ci_state_id = st.ci_state_id
	 </select>


	 <select id="getCIbyAttributes" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCI">
		select 
			ci.ci_id as ciId,
			ci.ci_name as ciName,
			ci.class_id as ciClassId,
			cl.class_name as ciClassName,
			cl.impl as impl,
			ci.ns_id as nsId,
			ns.ns_path as nsPath,
			ci.ci_goid as ciGoid,
			ci.comments,
			ci.ci_state_id as ciStateId,
			st.state_name as ciState,
			ci.last_applied_rfc_id as lastAppliedRfcId,
			ci.created_by as createdBy,
			ci.updated_by as updatedBy, 
			ci.created,
			ci.updated
		from cm_ci ci, md_classes cl, ns_namespaces ns, cm_ci_state st
		where (#{clazz}::varchar is null or cl.class_name = #{clazz})
		and (#{ns}::varchar is null or ns.ns_path = #{ns})
		and ci.class_id = cl.class_id
		and ci.ns_id = ns.ns_id
		and ci.ci_state_id = st.ci_state_id
		<foreach item="item" index="index" collection="attrList" open="and" separator="and"> 
		 exists (select 1 from cm_ci_attributes cia, md_class_attributes cla 
		         where cia.ci_id = ci.ci_id 
		         and cia.attribute_id = cla.attribute_id 
		         and cla.attribute_name = #{item.attributeName} 
		         and cia.df_attribute_value ${item.condition} #{item.avalue})  
        </foreach> 
	 </select>

	 <select id="getCIbyAttributesNsLike" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCI">
		select 
			ci.ci_id as ciId,
			ci.ci_name as ciName,
			ci.class_id as ciClassId,
			cl.class_name as ciClassName,
			cl.impl as impl,
			ci.ns_id as nsId,
			ns.ns_path as nsPath,
			ci.ci_goid as ciGoid,
			ci.comments,
			ci.ci_state_id as ciStateId,
			st.state_name as ciState,
			ci.last_applied_rfc_id as lastAppliedRfcId,
			ci.created_by as createdBy,
			ci.updated_by as updatedBy, 
			ci.created,
			ci.updated
		from cm_ci ci, md_classes cl, ns_namespaces ns, cm_ci_state st
		where (ns.ns_path like #{nsLike} or ns.ns_path = #{ns}) 
		and (#{clazz}::varchar is null or cl.class_name = #{clazz})
		and ci.class_id = cl.class_id
		and ci.ns_id = ns.ns_id
		and ci.ci_state_id = st.ci_state_id
		<foreach item="item" index="index" collection="attrList" open="and" separator="and"> 
		 exists (select 1 from cm_ci_attributes cia, md_class_attributes cla 
		         where cia.ci_id = ci.ci_id 
		         and cia.attribute_id = cla.attribute_id 
		         and cla.attribute_name = #{item.attributeName} 
		         and cia.df_attribute_value ${item.condition} #{item.avalue})  
        </foreach> 
	 </select>


	<select id="getCIbyAttributesWithAltNs" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCI">
		select
		ci.ci_id as ciId,
		ci.ci_name as ciName,
		ci.class_id as ciClassId,
		cl.class_name as ciClassName,
		cl.impl as impl,
		ci.ns_id as nsId,
		ns.ns_path as nsPath,
		ci.ci_goid as ciGoid,
		ci.comments,
		ci.ci_state_id as ciStateId,
		st.state_name as ciState,
		ci.last_applied_rfc_id as lastAppliedRfcId,
		ci.created_by as createdBy,
		ci.updated_by as updatedBy,
		ci.created,
		ci.updated
		from cm_ci ci, md_classes cl, ns_namespaces ns, cm_ci_state st, cm_ns_opt cno, ns_namespaces ns1, ns_opt_tag nt
		where (#{clazz}::varchar is null or cl.class_name = #{clazz})
		and (#{ns}::varchar is null or ns.ns_path = #{ns})
		and ci.class_id = cl.class_id
		and ci.ns_id = ns.ns_id
		and ci.ci_state_id = st.ci_state_id
		and cno.ci_id = ci.ci_id
		and ns1.ns_id = cno.ns_id
		and nt.tag_id = cno.tag_id
		and (#{tag}::varchar is null or nt.tag = #{tag})
		and (#{altNs}::varchar is null or ns1.ns_path = #{altNs})

		<foreach item="item" index="index" collection="attrList" open="and" separator="and">
			exists (select 1 from cm_ci_attributes cia, md_class_attributes cla
			where cia.ci_id = ci.ci_id
			and cia.attribute_id = cla.attribute_id
			and cla.attribute_name = #{item.attributeName}
			and cia.df_attribute_value ${item.condition} #{item.avalue})
		</foreach>
	</select>

	<select id="getCIbyAttributesNsLikeWithAltNs" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCI">
		select
		ci.ci_id as ciId,
		ci.ci_name as ciName,
		ci.class_id as ciClassId,
		cl.class_name as ciClassName,
		cl.impl as impl,
		ci.ns_id as nsId,
		ns.ns_path as nsPath,
		ci.ci_goid as ciGoid,
		ci.comments,
		ci.ci_state_id as ciStateId,
		st.state_name as ciState,
		ci.last_applied_rfc_id as lastAppliedRfcId,
		ci.created_by as createdBy,
		ci.updated_by as updatedBy,
		ci.created,
		ci.updated
		from cm_ci ci, md_classes cl, ns_namespaces ns, cm_ci_state st, cm_ns_opt cno, ns_namespaces ns1, ns_opt_tag nt
		where (ns.ns_path like #{nsLike} or ns.ns_path = #{ns})
		and (#{clazz}::varchar is null or cl.class_name = #{clazz})
		and cno.ci_id = ci.ci_id
		and ns1.ns_id = cno.ns_id
		and nt.tag_id = cno.tag_id
		and (#{tag}::varchar is null or nt.tag = #{tag})
		and (#{altNs}::varchar is null or ns1.ns_path = #{altNs})
		and ci.class_id = cl.class_id
		and ci.ns_id = ns.ns_id
		and ci.ci_state_id = st.ci_state_id
		<foreach item="item" index="index" collection="attrList" open="and" separator="and">
			exists (select 1 from cm_ci_attributes cia, md_class_attributes cla
			where cia.ci_id = ci.ci_id
			and cia.attribute_id = cla.attribute_id
			and cla.attribute_name = #{item.attributeName}
			and cia.df_attribute_value ${item.condition} #{item.avalue})
		</foreach>
	</select>



	<select id="getCIAttrs" parameterType="long" resultType="com.oneops.cms.cm.domain.CmsCIAttribute">
		select
			ca.ci_attribute_id as ciAttributeId,
			ca.attribute_id as attributeId,
			ca.ci_id as ciId,
			cla.attribute_name as attributeName,
			ca.df_attribute_value as dfValue,
			ca.dj_attribute_value as djValue,
			ca.owner,
			ca.comments,
			ca.created,
			ca.updated
		from cm_ci_attributes ca, md_class_attributes cla
		where ca.ci_id = #{value}
			and ca.attribute_id = cla.attribute_id  
	 </select>

	 <select id="getCIAttrsByCiIdList" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCIAttribute">
		select
			ca.ci_attribute_id as ciAttributeId,
			ca.attribute_id as attributeId,
			ca.ci_id as ciId,
			cla.attribute_name as attributeName,
			ca.df_attribute_value as dfValue,
			ca.dj_attribute_value as djValue,
			ca.owner,
			ca.comments,
			ca.created,
			ca.updated
		from cm_ci_attributes ca, md_class_attributes cla
		where ca.ci_id in 
			<foreach item="item" index="index" collection="ciIds" open="(" close=")" separator=", "> 
		         #{item} 
        	</foreach> 
			and ca.attribute_id = cla.attribute_id  
	 </select>

	 <select id="getCIAttrsNaked" parameterType="long" resultType="com.oneops.cms.cm.domain.CmsCIAttribute">
		select
			ca.ci_attribute_id as ciAttributeId,
			ca.attribute_id as attributeId,
			ca.ci_id as ciId,
			ca.df_attribute_value as dfValue,
			ca.dj_attribute_value as djValue,
			ca.owner,
			ca.comments,
			ca.created,
			ca.updated
		from cm_ci_attributes ca
		where ca.ci_id = #{value}
	 </select>

	 <select id="getCIAttrsNakedByCiIdList" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCIAttribute">
		select
			ca.ci_attribute_id as ciAttributeId,
			ca.attribute_id as attributeId,
			ca.ci_id as ciId,
			ca.df_attribute_value as dfValue,
			ca.dj_attribute_value as djValue,
			ca.owner,
			ca.comments,
			ca.created,
			ca.updated
		from cm_ci_attributes ca
		where ca.ci_id in 
			<foreach item="item" index="index" collection="ciIds" open="(" close=")" separator=", "> 
		         #{item} 
        	</foreach> 
	 </select>

	 <select id="getCIRelation" parameterType="long" resultType="com.oneops.cms.cm.domain.CmsCIRelation">
		select
			cir.ci_relation_id as ciRelationId,
			cir.ns_id as nsId,
			ns.ns_path as nsPath,
			cir.from_ci_id as fromCiId,
			cir.relation_goid as relationGoid,
			cir.relation_id as relationId,
			mdr.relation_name as relationName,
			cir.to_ci_id toCiId,
			cir.ci_state_id as relationStateId,
			cis.state_name as relationState,
			cir.last_applied_rfc_id as lastAppliedRfcId,
			cir.comments,
			cir.created,
			cir.updated
		from cm_ci_relations cir, md_relations mdr, cm_ci_state cis, ns_namespaces ns
		where cir.ci_relation_id = #{value} 
			and cir.relation_id = mdr.relation_id
			and cir.ci_state_id = cis.ci_state_id
			and ns.ns_id = cir.ns_id
	 </select>

	 <select id="getCIRelationAttrs" parameterType="long" resultType="com.oneops.cms.cm.domain.CmsCIRelationAttribute">
		select 
			cira.ci_rel_attribute_id as ciRelationAttributeId,
			cira.ci_relation_id as ciRelationId,
			cira.attribute_id as attributeId,
			mra.attribute_name as attributeName,
			cira.df_attribute_value as dfValue,
			cira.dj_attribute_value as djValue,
			cira.owner,
			cira.comments,
			cira.created,
			cira.updated 
		from cm_ci_relation_attributes cira, md_relation_attributes mra
		where cira.ci_relation_id = #{value} 
			and cira.attribute_id = mra.attribute_id	
	</select>

	 <select id="getCIRelationAttrsNaked" parameterType="long" resultType="com.oneops.cms.cm.domain.CmsCIRelationAttribute">
		select 
			cira.ci_rel_attribute_id as ciRelationAttributeId,
			cira.ci_relation_id as ciRelationId,
			cira.attribute_id as attributeId,
			cira.df_attribute_value as dfValue,
			cira.dj_attribute_value as djValue,
			cira.owner,
			cira.comments,
			cira.created,
			cira.updated 
		from cm_ci_relation_attributes cira
		where cira.ci_relation_id = #{value} 
	</select>

	 <select id="getCIRelationAttrsByRelIdList" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCIRelationAttribute">
		select 
			cira.ci_rel_attribute_id as ciRelationAttributeId,
			cira.ci_relation_id as ciRelationId,
			cira.attribute_id as attributeId,
			mra.attribute_name as attributeName,
			cira.df_attribute_value as dfValue,
			cira.dj_attribute_value as djValue,
			cira.owner,
			cira.comments,
			cira.created,
			cira.updated 
		from cm_ci_relation_attributes cira, md_relation_attributes mra
		where cira.ci_relation_id in 
		    <foreach item="item" index="index" collection="relIds" open="(" close=")" separator=", "> 
		         #{item} 
        	</foreach>  
			and cira.attribute_id = mra.attribute_id	
	</select>

	 <select id="getCIRelationAttrsNakedByRelIdList" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCIRelationAttribute">
		select 
			cira.ci_rel_attribute_id as ciRelationAttributeId,
			cira.ci_relation_id as ciRelationId,
			cira.attribute_id as attributeId,
			cira.df_attribute_value as dfValue,
			cira.dj_attribute_value as djValue,
			cira.owner,
			cira.comments,
			cira.created,
			cira.updated 
		from cm_ci_relation_attributes cira
		where cira.ci_relation_id in 
			<foreach item="item" index="index" collection="relIds" open="(" close=")" separator=", "> 
		         #{item} 
        	</foreach> 
	 </select>


	 <select id="getFromCIRelations" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCIRelation">
		select
			cir.ci_relation_id as ciRelationId,
			cir.ns_id as nsId,
			ns.ns_path as nsPath,
			cir.from_ci_id as fromCiId,
			cir.relation_goid as relationGoid,
			cir.relation_id as relationId,
			mdr.relation_name as relationName,
			cir.to_ci_id toCiId,
			cir.ci_state_id as relationStateId,
			cis.state_name as relationState,
			cir.last_applied_rfc_id as lastAppliedRfcId,
			cir.comments,
			cir.created,
			cir.updated
		from cm_ci_relations cir, md_relations mdr, cm_ci_state cis, cm_ci cc, md_classes mdc, ns_namespaces ns
		where cir.from_ci_id = #{fromId}  
		    and (#{relationName}::varchar is null or mdr.relation_name = #{relationName})
		    and (#{shortRelName}::varchar is null or mdr.short_relation_name = #{shortRelName})
		    and (#{toClazzName}::varchar is null or mdc.class_name = #{toClazzName})
		    and (#{toShortClazzName}::varchar is null or mdc.short_class_name = #{toShortClazzName})
		    and cir.to_ci_id = cc.ci_id
		    and cc.class_id = mdc.class_id
			and cir.relation_id = mdr.relation_id
			and cir.ci_state_id = cis.ci_state_id
			and cir.ns_id = ns.ns_id
	 </select>
	 
	 <select id="getFromCIRelationsByMultiRelationNames" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCIRelation">
		select
			cir.ci_relation_id as ciRelationId,
			cir.ns_id as nsId,
			ns.ns_path as nsPath,
			cir.from_ci_id as fromCiId,
			cir.relation_goid as relationGoid,
			cir.relation_id as relationId,
			mdr.relation_name as relationName,
			cir.to_ci_id toCiId,
			cir.ci_state_id as relationStateId,
			cis.state_name as relationState,
			cir.last_applied_rfc_id as lastAppliedRfcId,
			cir.comments,
			cir.created,
			cir.updated
		from cm_ci_relations cir, md_relations mdr, cm_ci_state cis, cm_ci cc, md_classes mdc, ns_namespaces ns
		where cir.from_ci_id = #{fromId}  
			<if test="relationNames != null &amp;&amp; !relationNames.isEmpty()">
				and mdr.relation_name in  <foreach item="item" index="index" collection="relationNames" open="(" close=")" separator=", "> #{item} </foreach>
			</if>   
		    <if test="shortRelNames != null &amp;&amp; !shortRelNames.isEmpty()">
		    	and mdr.short_relation_name in <foreach item="item" index="index" collection="shortRelNames" open="(" close=")" separator=", "> #{item} </foreach>
		    </if>
		    and cir.to_ci_id = cc.ci_id
		    and cc.class_id = mdc.class_id
			and cir.relation_id = mdr.relation_id
			and cir.ci_state_id = cis.ci_state_id
			and cir.ns_id = ns.ns_id
	 </select>

	 <select id="getFromCIRelativesByMultipleRelations" parameterType="map" resultType="com.oneops.cms.cm.domain.CIRelativeWrapper">
		select
		cc.ci_id as ciId,
		cc.ci_name as ciName,
		cc.class_id as ciClassId,
		mdc.class_name as ciClassName,
		mdc.impl as impl,
		cc.ns_id as nsId,
		ns.ns_path as nsPath,
		cc.ci_goid as ciGoid,
		cc.comments as comments,
		cc.ci_state_id as ciStateId,
		cis.state_name as ciState,
		cc.last_applied_rfc_id as lastAppliedRfcId,
		cc.created_by as createdBy,
		cc.updated_by as updatedBy,
		cc.created as created,
		cc.updated as updated,
		mdr.relation_name as relationName,
		cir.relation_id as relationId
		from cm_ci_relations cir, md_relations mdr, cm_ci_state cis, cm_ci cc, md_classes mdc, ns_namespaces ns
		where cir.from_ci_id = #{fromId}
		<if test="pairs != null &amp;&amp; !pairs.isEmpty()">
			<foreach item="item" index="index" collection="pairs" open=" and ((" close="))" separator=") or (">
				mdr.relation_name = #{item.relationName} and mdc.class_name = #{item.clazzName}
			</foreach>
		</if>
		and cir.to_ci_id = cc.ci_id
		and cc.class_id = mdc.class_id
		and cir.relation_id = mdr.relation_id
		and cc.ci_state_id = cis.ci_state_id
		and cir.ns_id = ns.ns_id
	 </select>

     <select id="getFromCIRelationsByToClassAndCiName" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCIRelation">
        select
            cir.ci_relation_id as ciRelationId,
            cir.ns_id as nsId,
            ns.ns_path as nsPath,
            cir.from_ci_id as fromCiId,
            cir.relation_goid as relationGoid,
            cir.relation_id as relationId,
            mdr.relation_name as relationName,
            cir.to_ci_id toCiId,
            cir.ci_state_id as relationStateId,
            cis.state_name as relationState,
            cir.last_applied_rfc_id as lastAppliedRfcId,
            cir.comments,
            cir.created,
            cir.updated
        from cm_ci_relations cir, md_relations mdr, cm_ci_state cis, cm_ci cc, md_classes mdc, ns_namespaces ns
        where cir.from_ci_id = #{fromId}  
        	and (#{relationName}::varchar is null or mdr.relation_name = #{relationName})
		    and (#{shortRelName}::varchar is null or mdr.short_relation_name = #{shortRelName})
		    and (#{toClazzName}::varchar is null or mdc.class_name = #{toClazzName})
            and cir.to_ci_id = cc.ci_id
            and cc.class_id = mdc.class_id
            and cir.relation_id = mdr.relation_id
            and cir.ci_state_id = cis.ci_state_id
            and cc.ci_name=#{toCiName}
            and cir.ns_id = ns.ns_id
     </select>

	 <select id="getFromCIRelationsByToCiIDs" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCIRelation">
		select
			cir.ci_relation_id as ciRelationId,
			cir.ns_id as nsId,
			ns.ns_path as nsPath,
			cir.from_ci_id as fromCiId,
			cir.relation_goid as relationGoid,
			cir.relation_id as relationId,
			mdr.relation_name as relationName,
			cir.to_ci_id toCiId,
			cir.ci_state_id as relationStateId,
			cis.state_name as relationState,
			cir.last_applied_rfc_id as lastAppliedRfcId,
			cir.comments,
			cir.created,
			cir.updated
		from cm_ci_relations cir, md_relations mdr, cm_ci_state cis, cm_ci cc, md_classes mdc, ns_namespaces ns
		where cir.from_ci_id = #{fromId}  
        	and (#{relationName}::varchar is null or mdr.relation_name = #{relationName})
		    and (#{shortRelName}::varchar is null or mdr.short_relation_name = #{shortRelName})
		    and cir.to_ci_id in 
			<foreach item="item" index="index" collection="toCiIds" open="(" close=")" separator=", "> 
		         #{item} 
        	</foreach> 
		    and cir.to_ci_id = cc.ci_id
		    and cc.class_id = mdc.class_id
			and cir.relation_id = mdr.relation_id
			and cir.ci_state_id = cis.ci_state_id
			and cir.ns_id = ns.ns_id
	 </select>


	 <select id="getFromCIRelationsByNS" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCIRelation">
		select
			cir.ci_relation_id as ciRelationId,
			cir.ns_id as nsId,
			ns.ns_path as nsPath,
			cir.from_ci_id as fromCiId,
			cir.relation_goid as relationGoid,
			cir.relation_id as relationId,
			mdr.relation_name as relationName,
			cir.to_ci_id toCiId,
			cir.ci_state_id as relationStateId,
			cis.state_name as relationState,
			cir.last_applied_rfc_id as lastAppliedRfcId,
			cir.comments,
			cir.created,
			cir.updated
		from cm_ci_relations cir, md_relations mdr, cm_ci_state cis, cm_ci cc, md_classes mdc, ns_namespaces ns, ns_namespaces target_ns
		where cir.from_ci_id = #{fromId}  
			and (#{relationName}::varchar is null or mdr.relation_name = #{relationName})
		    and (#{shortRelName}::varchar is null or mdr.short_relation_name = #{shortRelName})
		    and (#{toClazzName}::varchar is null or mdc.class_name = #{toClazzName})
		    and (#{toShortClazzName}::varchar is null or mdc.short_class_name = #{toShortClazzName})
		    and cir.to_ci_id = cc.ci_id
		    and cc.class_id = mdc.class_id
			and cir.relation_id = mdr.relation_id
			and cir.ci_state_id = cis.ci_state_id
			and cir.ns_id = ns.ns_id
		    and cc.ns_id = target_ns.ns_id
		    and target_ns.ns_path = #{toNsPath}
	 </select>

	 <select id="getCountFromCIRelationsByNS" parameterType="map" resultType="long">
		select count(1)
		from cm_ci_relations cir, md_relations mdr, cm_ci_state cis, cm_ci cc, md_classes mdc, ns_namespaces ns, ns_namespaces target_ns
		where cir.from_ci_id = #{fromId}  
			and (#{relationName}::varchar is null or mdr.relation_name = #{relationName})
		    and (#{shortRelName}::varchar is null or mdr.short_relation_name = #{shortRelName})
		    and (#{toClazzName}::varchar is null or mdc.class_name = #{toClazzName})
		    and cir.to_ci_id = cc.ci_id
		    and cc.class_id = mdc.class_id
			and cir.relation_id = mdr.relation_id
			and cir.ci_state_id = cis.ci_state_id
			and cir.ns_id = ns.ns_id
		    and cc.ns_id = target_ns.ns_id
		    and target_ns.ns_path = #{toNsPath}
	 </select>


	 <select id="getFromCIRelationsByNSLike" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCIRelation">
		select
			cir.ci_relation_id as ciRelationId,
			cir.ns_id as nsId,
			ns.ns_path as nsPath,
			cir.from_ci_id as fromCiId,
			cir.relation_goid as relationGoid,
			cir.relation_id as relationId,
			mdr.relation_name as relationName,
			cir.to_ci_id toCiId,
			cir.ci_state_id as relationStateId,
			cis.state_name as relationState,
			cir.last_applied_rfc_id as lastAppliedRfcId,
			cir.comments,
			cir.created,
			cir.updated
		from cm_ci_relations cir, md_relations mdr, cm_ci_state cis, cm_ci cc, md_classes mdc, ns_namespaces ns, ns_namespaces target_ns
		where cir.from_ci_id = #{fromId}  
			and (#{relationName}::varchar is null or mdr.relation_name = #{relationName})
		    and (#{shortRelName}::varchar is null or mdr.short_relation_name = #{shortRelName})
		    and (#{toClazzName}::varchar is null or mdc.class_name = #{toClazzName})
		    and (#{toShortClazzName}::varchar is null or mdc.short_class_name = #{toShortClazzName})
		    and cir.to_ci_id = cc.ci_id
		    and cc.class_id = mdc.class_id
			and cir.relation_id = mdr.relation_id
			and cir.ci_state_id = cis.ci_state_id
			and cir.ns_id = ns.ns_id
		    and cc.ns_id = target_ns.ns_id
		    and (target_ns.ns_path like #{toNsPathLike} or target_ns.ns_path = #{toNsPath})
	 </select>

	 <select id="getCountFromCIRelationsByNSLike" parameterType="map" resultType="long">
		select count(1)
		from cm_ci_relations cir, md_relations mdr, cm_ci_state cis, cm_ci cc, md_classes mdc, ns_namespaces ns, ns_namespaces target_ns
		where cir.from_ci_id = #{fromId}  
			and (#{relationName}::varchar is null or mdr.relation_name = #{relationName})
		    and (#{shortRelName}::varchar is null or mdr.short_relation_name = #{shortRelName})
		    and (#{toClazzName}::varchar is null or mdc.class_name = #{toClazzName})
		    and cir.to_ci_id = cc.ci_id
		    and cc.class_id = mdc.class_id
			and cir.relation_id = mdr.relation_id
			and cir.ci_state_id = cis.ci_state_id
			and cir.ns_id = ns.ns_id
		    and cc.ns_id = target_ns.ns_id
		    and (target_ns.ns_path like #{toNsPathLike} or target_ns.ns_path = #{toNsPath})
	 </select>

	 <select id="getCountFromCIRelationsByNSLikeGroupByNs" parameterType="map" resultType="hashmap">
		select target_ns.ns_path as path, count(1) as cnt
		from cm_ci_relations cir, md_relations mdr, cm_ci cc, md_classes mdc, ns_namespaces ns, ns_namespaces target_ns
		where cir.from_ci_id = #{fromId}  
			and (#{relationName}::varchar is null or mdr.relation_name = #{relationName})
		    and (#{shortRelName}::varchar is null or mdr.short_relation_name = #{shortRelName})
		    and (#{toClazzName}::varchar is null or mdc.class_name = #{toClazzName})
		    and cir.to_ci_id = cc.ci_id
		    and cc.class_id = mdc.class_id
			and cir.relation_id = mdr.relation_id
			and cir.ns_id = ns.ns_id
		    and cc.ns_id = target_ns.ns_id
		    and (target_ns.ns_path like #{toNsPathLike} or target_ns.ns_path = #{toNsPath})
		group by target_ns.ns_path    
	 </select>

	 <select id="getCountCIRelationsByNSLikeGroupByFromCiId" parameterType="map" resultType="hashmap">
		select cir.from_ci_id as ci_id, count(1) as cnt
		from cm_ci_relations cir, md_relations mdr, cm_ci cc, md_classes mdc, ns_namespaces ns
		where (ns.ns_path like #{nsLike} or ns.ns_path = #{ns})
			and (#{relationName}::varchar is null or mdr.relation_name = #{relationName})
		    and (#{shortRelName}::varchar is null or mdr.short_relation_name = #{shortRelName})
		    and (#{toClazzName}::varchar is null or mdc.class_name = #{toClazzName})
		    and cir.to_ci_id = cc.ci_id
		    and cc.class_id = mdc.class_id
		    and cir.relation_id = mdr.relation_id
		    and cir.ns_id = ns.ns_id
		group by cir.from_ci_id   
	 </select>

	 <select id="getCountCIRelationsByNSLikeAndRelName" parameterType="map" resultType="hashmap">
		select cir.from_ci_id as ci_id, count(1) as cnt
		from cm_ci_relations cir, md_relations mdr, ns_namespaces ns
		where (ns.ns_path like #{nsLike})
		    and cir.ns_id = ns.ns_id
			and (#{relationName}::varchar is null or mdr.relation_name = #{relationName})
		    and (#{shortRelName}::varchar is null or mdr.short_relation_name = #{shortRelName})
		    and cir.relation_id = mdr.relation_id
		group by cir.from_ci_id
	 </select>

	 <select id="getCountCIRelationsByNSLikeGroupByToCiId" parameterType="map" resultType="hashmap">
		select cir.to_ci_id as ci_id, count(1) as cnt
		from cm_ci_relations cir, md_relations mdr, cm_ci cc, md_classes mdc, ns_namespaces ns
		where (ns.ns_path like #{nsLike} or ns.ns_path = #{ns})
			and (#{relationName}::varchar is null or mdr.relation_name = #{relationName})
		    and (#{shortRelName}::varchar is null or mdr.short_relation_name = #{shortRelName})
		    and (#{fromClazzName}::varchar is null or mdc.class_name = #{fromClazzName})
		    and cir.from_ci_id = cc.ci_id
		    and cc.class_id = mdc.class_id
		    and cir.relation_id = mdr.relation_id
		    and cir.ns_id = ns.ns_id
		group by cir.to_ci_id   
	 </select>

	 <select id="getToCIRelations" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCIRelation">
		select
			cir.ci_relation_id as ciRelationId,
			cir.ns_id as nsId,
			ns.ns_path as nsPath,
			cir.from_ci_id as fromCiId,
			cir.relation_goid as relationGoid,
			cir.relation_id as relationId,
			mdr.relation_name as relationName,
			cir.to_ci_id toCiId,
			cir.ci_state_id as relationStateId,
			cis.state_name as relationState,
			cir.last_applied_rfc_id as lastAppliedRfcId,
			cir.comments,
			cir.created,
			cir.updated
		from cm_ci_relations cir, md_relations mdr, cm_ci_state cis, cm_ci cc, md_classes mdc, ns_namespaces ns
		where cir.to_ci_id = #{toId}  
			and (#{relationName}::varchar is null or mdr.relation_name = #{relationName})
		    and (#{shortRelName}::varchar is null or mdr.short_relation_name = #{shortRelName})
		    and (#{fromClazzName}::varchar is null or mdc.class_name = #{fromClazzName})
		    and (#{fromShortClazzName}::varchar is null or mdc.short_class_name = #{fromShortClazzName})
		    and cir.from_ci_id = cc.ci_id
		    and cc.class_id = mdc.class_id
			and cir.relation_id = mdr.relation_id
			and cir.ci_state_id = cis.ci_state_id
			and cir.ns_id = ns.ns_id
	 </select>

	 <select id="getToCIRelationsByFromCiIDs" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCIRelation">
		select
			cir.ci_relation_id as ciRelationId,
			cir.ns_id as nsId,
			ns.ns_path as nsPath,
			cir.from_ci_id as fromCiId,
			cir.relation_goid as relationGoid,
			cir.relation_id as relationId,
			mdr.relation_name as relationName,
			cir.to_ci_id toCiId,
			cir.ci_state_id as relationStateId,
			cis.state_name as relationState,
			cir.last_applied_rfc_id as lastAppliedRfcId,
			cir.comments,
			cir.created,
			cir.updated
		from cm_ci_relations cir, md_relations mdr, cm_ci_state cis, cm_ci cc, md_classes mdc, ns_namespaces ns
		where cir.to_ci_id = #{toId}  
			and (#{relationName}::varchar is null or mdr.relation_name = #{relationName})
		    and (#{shortRelName}::varchar is null or mdr.short_relation_name = #{shortRelName})
		    and cir.from_ci_id in 
			<foreach item="item" index="index" collection="fromCiIds" open="(" close=")" separator=", "> 
		         #{item} 
        	</foreach> 
		    and cir.from_ci_id = cc.ci_id
		    and cc.class_id = mdc.class_id
			and cir.relation_id = mdr.relation_id
			and cir.ci_state_id = cis.ci_state_id
			and cir.ns_id = ns.ns_id
	 </select>

	 <select id="getToCIRelationsShortName" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCIRelation">
		select
			cir.ci_relation_id as ciRelationId,
			cir.ns_id as nsId,
			ns.ns_path as nsPath,
			cir.from_ci_id as fromCiId,
			cir.relation_goid as relationGoid,
			cir.relation_id as relationId,
			mdr.relation_name as relationName,
			cir.to_ci_id toCiId,
			cir.ci_state_id as relationStateId,
			cis.state_name as relationState,
			cir.last_applied_rfc_id as lastAppliedRfcId,
			cir.comments,
			cir.created,
			cir.updated
		from cm_ci_relations cir, md_relations mdr, cm_ci_state cis, cm_ci cc, md_classes mdc, ns_namespaces ns
		where cir.to_ci_id = #{toId}  
		    and (#{shortRelName}::varchar is null or mdr.short_relation_name = #{shortRelName})
		    and (#{fromClazzName}::varchar is null or mdc.class_name = #{fromClazzName})
		    and cir.from_ci_id = cc.ci_id
		    and cc.class_id = mdc.class_id
			and cir.relation_id = mdr.relation_id
			and cir.ci_state_id = cis.ci_state_id
			and cir.ns_id = ns.ns_id
	 </select>

	 <select id="getToCIRelationsByNS" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCIRelation">
		select
			cir.ci_relation_id as ciRelationId,
			cir.ns_id as nsId,
			ns.ns_path as nsPath,
			cir.from_ci_id as fromCiId,
			cir.relation_goid as relationGoid,
			cir.relation_id as relationId,
			mdr.relation_name as relationName,
			cir.to_ci_id toCiId,
			cir.ci_state_id as relationStateId,
			cis.state_name as relationState,
			cir.last_applied_rfc_id as lastAppliedRfcId,
			cir.comments,
			cir.created,
			cir.updated
		from cm_ci_relations cir, md_relations mdr, cm_ci_state cis, cm_ci cc, md_classes mdc, ns_namespaces ns, ns_namespaces target_ns
		where cir.to_ci_id = #{toId}  
			and (#{relationName}::varchar is null or mdr.relation_name = #{relationName})
		    and (#{shortRelName}::varchar is null or mdr.short_relation_name = #{shortRelName})
		    and (#{fromClazzName}::varchar is null or mdc.class_name = #{fromClazzName})
		    and (#{fromShortClazzName}::varchar is null or mdc.short_class_name = #{fromShortClazzName})
		    and cir.from_ci_id = cc.ci_id
		    and cc.class_id = mdc.class_id
			and cir.relation_id = mdr.relation_id
			and cir.ci_state_id = cis.ci_state_id
			and cir.ns_id = ns.ns_id
		    and cc.ns_id = target_ns.ns_id
		    and target_ns.ns_path = #{fromNsPath}
	 </select>

	 <select id="getCountToCIRelationsByNS" parameterType="map" resultType="long">
		select count(1)
		from cm_ci_relations cir, md_relations mdr, cm_ci_state cis, cm_ci cc, md_classes mdc, ns_namespaces ns, ns_namespaces target_ns
		where cir.to_ci_id = #{toId}  
			and (#{relationName}::varchar is null or mdr.relation_name = #{relationName})
		    and (#{shortRelName}::varchar is null or mdr.short_relation_name = #{shortRelName})
		    and (#{fromClazzName}::varchar is null or mdc.class_name = #{fromClazzName})
		    and cir.from_ci_id = cc.ci_id
		    and cc.class_id = mdc.class_id
			and cir.relation_id = mdr.relation_id
			and cir.ci_state_id = cis.ci_state_id
			and cir.ns_id = ns.ns_id
		    and cc.ns_id = target_ns.ns_id
		    and target_ns.ns_path = #{fromNsPath}
	 </select>

	 <select id="getToCIRelationsByNSLike" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCIRelation">
		select
			cir.ci_relation_id as ciRelationId,
			cir.ns_id as nsId,
			ns.ns_path as nsPath,
			cir.from_ci_id as fromCiId,
			cir.relation_goid as relationGoid,
			cir.relation_id as relationId,
			mdr.relation_name as relationName,
			cir.to_ci_id toCiId,
			cir.ci_state_id as relationStateId,
			cis.state_name as relationState,
			cir.last_applied_rfc_id as lastAppliedRfcId,
			cir.comments,
			cir.created,
			cir.updated
		from cm_ci_relations cir, md_relations mdr, cm_ci_state cis, cm_ci cc, md_classes mdc, ns_namespaces ns, ns_namespaces target_ns
		where cir.to_ci_id = #{toId}  
			and (#{relationName}::varchar is null or mdr.relation_name = #{relationName})
		    and (#{shortRelName}::varchar is null or mdr.short_relation_name = #{shortRelName})
		    and (#{fromClazzName}::varchar is null or mdc.class_name = #{fromClazzName})
		    and (#{fromShortClazzName}::varchar is null or mdc.short_class_name = #{fromShortClazzName})
		    and cir.from_ci_id = cc.ci_id
		    and cc.class_id = mdc.class_id
			and cir.relation_id = mdr.relation_id
			and cir.ci_state_id = cis.ci_state_id
			and cir.ns_id = ns.ns_id
		    and cc.ns_id = target_ns.ns_id
		    and (target_ns.ns_path like #{fromNsPathLike} or target_ns.ns_path = #{fromNsPath})
	 </select>

	 <select id="getCountToCIRelationsByNSLike" parameterType="map" resultType="long">
		select count(1)
		from cm_ci_relations cir, md_relations mdr, cm_ci_state cis, cm_ci cc, md_classes mdc, ns_namespaces ns, ns_namespaces target_ns
		where cir.to_ci_id = #{toId}  
			and (#{relationName}::varchar is null or mdr.relation_name = #{relationName})
		    and (#{shortRelName}::varchar is null or mdr.short_relation_name = #{shortRelName})
		    and (#{fromClazzName}::varchar is null or mdc.class_name = #{fromClazzName})
		    and cir.from_ci_id = cc.ci_id
		    and cc.class_id = mdc.class_id
			and cir.relation_id = mdr.relation_id
			and cir.ci_state_id = cis.ci_state_id
			and cir.ns_id = ns.ns_id
		    and cc.ns_id = target_ns.ns_id
		    and (target_ns.ns_path like #{fromNsPathLike} or target_ns.ns_path = #{fromNsPath})
	 </select>

	 <select id="getCountToCIRelationsByNSLikeGroupByNs" parameterType="map" resultType="hashmap">
		select target_ns.ns_path as path, count(1) as cnt
		from cm_ci_relations cir, md_relations mdr, cm_ci_state cis, cm_ci cc, md_classes mdc, ns_namespaces ns, ns_namespaces target_ns
		where cir.to_ci_id = #{toId}  
			and (#{relationName}::varchar is null or mdr.relation_name = #{relationName})
		    and (#{shortRelName}::varchar is null or mdr.short_relation_name = #{shortRelName})
		    and (#{fromClazzName}::varchar is null or mdc.class_name = #{fromClazzName})
		    and cir.from_ci_id = cc.ci_id
		    and cc.class_id = mdc.class_id
			and cir.relation_id = mdr.relation_id
			and cir.ci_state_id = cis.ci_state_id
			and cir.ns_id = ns.ns_id
		    and cc.ns_id = target_ns.ns_id
		    and (target_ns.ns_path like #{fromNsPathLike} or target_ns.ns_path = #{fromNsPath})
		group by target_ns.ns_path    
	 </select>


	 <select id="getFromToCIRelations" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCIRelation">
		select
			cir.ci_relation_id as ciRelationId,
			cir.ns_id as nsId,
			ns.ns_path as nsPath,
			cir.from_ci_id as fromCiId,
			cir.relation_goid as relationGoid,
			cir.relation_id as relationId,
			mdr.relation_name as relationName,
			cir.to_ci_id toCiId,
			cir.ci_state_id as relationStateId,
			cis.state_name as relationState,
			cir.last_applied_rfc_id as lastAppliedRfcId,
			cir.comments,
			cir.created,
			cir.updated
		from cm_ci_relations cir, md_relations mdr, cm_ci_state cis, ns_namespaces ns
		where cir.from_ci_id = #{fromId}  
		    and (#{relationName}::varchar is null or mdr.relation_name = #{relationName})
		    and cir.to_ci_id = #{toId}
			and cir.relation_id = mdr.relation_id
			and cir.ci_state_id = cis.ci_state_id
			and cir.ns_id = ns.ns_id
	 </select>

	 <select id="getCIRelations" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCIRelation">
		select
			cir.ci_relation_id as ciRelationId,
			cir.ns_id as nsId,
			ns.ns_path as nsPath,
			cir.from_ci_id as fromCiId,
			cir.relation_goid as relationGoid,
			cir.relation_id as relationId,
			mdr.relation_name as relationName,
			cir.to_ci_id toCiId,
			cir.ci_state_id as relationStateId,
			cis.state_name as relationState,
			cir.last_applied_rfc_id as lastAppliedRfcId,
			cir.comments,
			cir.created,
			cir.updated
		from cm_ci_relations cir, md_relations mdr, cm_ci_state cis, cm_ci from_ci, md_classes from_mdc, cm_ci to_ci, md_classes to_mdc, ns_namespaces ns
		where cir.ns_id = ns.ns_id
		  and cir.ci_state_id = cis.ci_state_id
		  and (#{nsPath}::varchar is null or ns.ns_path = #{nsPath})   
		  and cir.relation_id = mdr.relation_id  
	      and (#{relationName}::varchar is null or mdr.relation_name = #{relationName})
		  and (#{shortRelName}::varchar is null or mdr.short_relation_name = #{shortRelName})
		  and cir.from_ci_id = from_ci.ci_id
		  and from_ci.class_id = from_mdc.class_id
		  and (#{fromClazzName}::varchar is null or from_mdc.class_name = #{fromClazzName})
		  and (#{fromShortClazzName}::varchar is null or from_mdc.short_class_name = #{fromShortClazzName})
		  and cir.to_ci_id = to_ci.ci_id
		  and to_ci.class_id = to_mdc.class_id
		  and (#{toClazzName}::varchar is null or to_mdc.class_name = #{toClazzName})
		  and (#{toShortClazzName}::varchar is null or to_mdc.short_class_name = #{toShortClazzName})



	 </select>

	 <select id="getCIRelationsByState" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCIRelation">
		select
			cir.ci_relation_id as ciRelationId,
			cir.ns_id as nsId,
			ns.ns_path as nsPath,
			cir.from_ci_id as fromCiId,
			cir.relation_goid as relationGoid,
			cir.relation_id as relationId,
			mdr.relation_name as relationName,
			cir.to_ci_id toCiId,
			cir.ci_state_id as relationStateId,
			cis.state_name as relationState,
			cir.last_applied_rfc_id as lastAppliedRfcId,
			cir.comments,
			cir.created,
			cir.updated
		from cm_ci_relations cir, md_relations mdr, cm_ci_state cis, cm_ci from_ci, md_classes from_mdc, cm_ci to_ci, md_classes to_mdc, ns_namespaces ns
		where cir.ns_id = ns.ns_id
		  and cir.ci_state_id = cis.ci_state_id
		  and ns.ns_path = #{nsPath}   
		  and cis.state_name = #{ciState}	
		  and cir.relation_id = mdr.relation_id  
	      and (#{relationName}::varchar is null or mdr.relation_name = #{relationName})
		  and cir.from_ci_id = from_ci.ci_id
		  and from_ci.class_id = from_mdc.class_id
		  and (#{fromClazzName}::varchar is null or from_mdc.class_name = #{fromClazzName})
		  and cir.to_ci_id = to_ci.ci_id
		  and to_ci.class_id = to_mdc.class_id
		  and (#{toClazzName}::varchar is null or to_mdc.class_name = #{toClazzName})
	 </select>

	 <select id="getCIRelationsNsLike" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCIRelation">
		select
			cir.ci_relation_id as ciRelationId,
			cir.ns_id as nsId,
			ns.ns_path as nsPath,
			cir.from_ci_id as fromCiId,
			cir.relation_goid as relationGoid,
			cir.relation_id as relationId,
			mdr.relation_name as relationName,
			cir.to_ci_id toCiId,
			cir.ci_state_id as relationStateId,
			cis.state_name as relationState,
			cir.last_applied_rfc_id as lastAppliedRfcId,
			cir.comments,
			cir.created,
			cir.updated
		from cm_ci_relations cir, md_relations mdr, cm_ci_state cis, cm_ci from_ci, md_classes from_mdc, cm_ci to_ci, md_classes to_mdc, ns_namespaces ns
		where (ns.ns_path like #{nsLike} or ns.ns_path = #{ns}) 
		  and cir.ns_id = ns.ns_id
		  and cir.ci_state_id = cis.ci_state_id
		  and cir.relation_id = mdr.relation_id  
	      and (#{relationName}::varchar is null or mdr.relation_name = #{relationName})
		  and (#{shortRelName}::varchar is null or mdr.short_relation_name = #{shortRelName})
		  and cir.from_ci_id = from_ci.ci_id
		  and from_ci.class_id = from_mdc.class_id
		  and (#{fromClazzName}::varchar is null or from_mdc.class_name = #{fromClazzName})
		  and (#{fromShortClazzName}::varchar is null or from_mdc.short_class_name = #{fromShortClazzName})
		  and cir.to_ci_id = to_ci.ci_id
		  and to_ci.class_id = to_mdc.class_id
		  and (#{toClazzName}::varchar is null or to_mdc.class_name = #{toClazzName})
		  and (#{toShortClazzName}::varchar is null or to_mdc.short_class_name = #{toShortClazzName})
	 </select>

	 <select id="getCIRelationsByStateNsLike" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCIRelation">
		select
			cir.ci_relation_id as ciRelationId,
			cir.ns_id as nsId,
			ns.ns_path as nsPath,
			cir.from_ci_id as fromCiId,
			cir.relation_goid as relationGoid,
			cir.relation_id as relationId,
			mdr.relation_name as relationName,
			cir.to_ci_id toCiId,
			cir.ci_state_id as relationStateId,
			cis.state_name as relationState,
			cir.last_applied_rfc_id as lastAppliedRfcId,
			cir.comments,
			cir.created,
			cir.updated
		from cm_ci_relations cir, md_relations mdr, cm_ci_state cis, cm_ci from_ci, md_classes from_mdc, cm_ci to_ci, md_classes to_mdc, ns_namespaces ns
		where (ns.ns_path like #{nsLike} or ns.ns_path = #{ns}) 
		  and cir.ns_id = ns.ns_id
		  and cir.ci_state_id = cis.ci_state_id
		  and cis.state_name = #{ciState}
		  and cir.relation_id = mdr.relation_id  
		  <if test="relationNames != null &amp;&amp; !relationNames.isEmpty()">
		  	  and mdr.relation_name in
	          <foreach item="item" index="index" collection="relationNames" open="(" close=")" separator=", "> 
		          #{item} 
        	  </foreach>
		  </if>
	      
		  and cir.from_ci_id = from_ci.ci_id
		  and from_ci.class_id = from_mdc.class_id
		  and (#{fromClazzName}::varchar is null or from_mdc.class_name = #{fromClazzName})
		  and cir.to_ci_id = to_ci.ci_id
		  and to_ci.class_id = to_mdc.class_id
		  and (#{toClazzName}::varchar is null or to_mdc.class_name = #{toClazzName})
	 </select>

	 <select id="getFromCIRelationsByAttrs" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCIRelation">
		select
			cir.ci_relation_id as ciRelationId,
			cir.ns_id as nsId,
			ns.ns_path as nsPath,
			cir.from_ci_id as fromCiId,
			cir.relation_goid as relationGoid,
			cir.relation_id as relationId,
			mdr.relation_name as relationName,
			cir.to_ci_id toCiId,
			cir.ci_state_id as relationStateId,
			cis.state_name as relationState,
			cir.last_applied_rfc_id as lastAppliedRfcId,
			cir.comments,
			cir.created,
			cir.updated
		from cm_ci_relations cir, md_relations mdr, cm_ci_state cis, cm_ci cc, md_classes mdc, ns_namespaces ns
		where cir.from_ci_id = #{fromId}  
	      	and (#{relationName}::varchar is null or mdr.relation_name = #{relationName})
		  	and (#{shortRelName}::varchar is null or mdr.short_relation_name = #{shortRelName})
			and (#{toClazzName}::varchar is null or mdc.class_name = #{toClazzName})
		    and cir.to_ci_id = cc.ci_id
		    and cc.class_id = mdc.class_id
			and cir.relation_id = mdr.relation_id
			and cir.ci_state_id = cis.ci_state_id
			and cir.ns_id = ns.ns_id
			<foreach item="item" index="index" collection="attrList" open="and" separator="and"> 
		 		exists (select 1 from cm_ci_relation_attributes cra, md_relation_attributes mra 
		         where cra.ci_relation_id = cir.ci_relation_id 
		         and cra.attribute_id = mra.attribute_id 
		         and mra.attribute_name = #{item.attributeName} 
		         and cra.dj_attribute_value ${item.condition} #{item.avalue})  
        	</foreach> 
	 </select>

	 <select id="getToCIRelationsByAttrs" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsCIRelation">
		select
			cir.ci_relation_id as ciRelationId,
			cir.ns_id as nsId,
			ns.ns_path as nsPath,
			cir.from_ci_id as fromCiId,
			cir.relation_goid as relationGoid,
			cir.relation_id as relationId,
			mdr.relation_name as relationName,
			cir.to_ci_id toCiId,
			cir.ci_state_id as relationStateId,
			cis.state_name as relationState,
			cir.last_applied_rfc_id as lastAppliedRfcId,
			cir.comments,
			cir.created,
			cir.updated
		from cm_ci_relations cir, md_relations mdr, cm_ci_state cis, cm_ci cc, md_classes mdc, ns_namespaces ns
		where cir.to_ci_id = #{toId}  
		  	and (#{relationName}::varchar is null or mdr.relation_name = #{relationName})
		  	and (#{shortRelName}::varchar is null or mdr.short_relation_name = #{shortRelName})
		    and (#{fromClazzName}::varchar is null or mdc.class_name = #{fromClazzName})
		    and cir.from_ci_id = cc.ci_id
		    and cc.class_id = mdc.class_id
			and cir.relation_id = mdr.relation_id
			and cir.ci_state_id = cis.ci_state_id
			and cir.ns_id = ns.ns_id
			<foreach item="item" index="index" collection="attrList" open="and" separator="and"> 
		 		exists (select 1 from cm_ci_relation_attributes cra, md_relation_attributes mra 
		         where cra.ci_relation_id = cir.ci_relation_id 
		         and cra.attribute_id = mra.attribute_id 
		         and mra.attribute_name = #{item.attributeName} 
		         and cra.dj_attribute_value ${item.condition} #{item.avalue})  
        	</foreach> 
			
	 </select>

	 <select id="getEnvState" parameterType="String" useCache="false" resultType="hashmap">
			select ci.ci_id as bad_ci, cir.to_ci_id as bad_bom_ci
			from cm_ci ci, cm_ci_relations cir, md_relations r, cm_ci_relation_attributes cira, md_relation_attributes ra
			where ci.ci_id in (
				select cir1.to_ci_id
				from cm_ci_relations cir1, md_relations r1
				where
				cir1.from_ci_id in (
					select ci.ci_id
					from ns_namespaces ns, cm_ci ci, md_classes md, cm_ci_relations cir, md_relations r, cm_ci_relation_attributes cira, md_relation_attributes a
					where ns.ns_path like #{value}
					and ns.ns_id = ci.ns_id 
					and ci.class_id = md.class_id
					and md.class_name = 'manifest.Platform'
					and cir.to_ci_id = ci.ci_id
					and cir.relation_id = r.relation_id
					and r.relation_name = 'manifest.ComposedOf'
					and cira.ci_relation_id = cir.ci_relation_id
					and a.attribute_id = cira.attribute_id
					and a.attribute_name = 'enabled'
					and cira.dj_attribute_value = 'true'
				)
				and cir1.relation_id = r1.relation_id
				and r1.relation_name = 'manifest.Requires'
			) 
			and cir.from_ci_id = ci.ci_id
			and cir.relation_id = r.relation_id
			and r.relation_name = 'base.RealizedAs'
			and cir.ci_relation_id = cira.ci_relation_id
			and cira.attribute_id = ra.attribute_id
			and ra.attribute_name = 'last_manifest_rfc'
			and ci.last_applied_rfc_id != cira.dj_attribute_value::bigint
			union all
			select ci.ci_id as bad_ci, null as bad_bom_ci
			from cm_ci ci
			where ci.ci_id in (
				select cir1.to_ci_id
				from cm_ci_relations cir1, md_relations r1
				where
				cir1.from_ci_id in (
					select ci.ci_id
					from ns_namespaces ns, cm_ci ci, md_classes md, cm_ci_relations cir, md_relations r, cm_ci_relation_attributes cira, md_relation_attributes a
					where ns.ns_path like #{value}
					and ns.ns_id = ci.ns_id 
					and ci.class_id = md.class_id
					and md.class_name = 'manifest.Platform'
					and cir.to_ci_id = ci.ci_id
					and cir.relation_id = r.relation_id
					and r.relation_name = 'manifest.ComposedOf'
					and cira.ci_relation_id = cir.ci_relation_id
					and a.attribute_id = cira.attribute_id
					and a.attribute_name = 'enabled'
					and cira.dj_attribute_value = 'true'
				)
				and cir1.relation_id = r1.relation_id
				and r1.relation_name = 'manifest.Requires'
			) 
			and not exists (select 1 from  cm_ci_relations cir, md_relations r
					where cir.from_ci_id = ci.ci_id
					and cir.relation_id = r.relation_id
					and r.relation_name = 'base.RealizedAs'
					)
			union all
			select ci.ci_id as bad_ci, cir.to_ci_id as bad_bom_ci
			from cm_ci ci, cm_ci_relations cir, md_relations r
			where ci.ci_id in (
				select cir1.to_ci_id
				from cm_ci_relations cir1, md_relations r1
				where
				cir1.from_ci_id in (
					select ci.ci_id
					from ns_namespaces ns, cm_ci ci, md_classes md, cm_ci_relations cir, md_relations r, cm_ci_relation_attributes cira, md_relation_attributes a
					where ns.ns_path like #{value}
					and ns.ns_id = ci.ns_id 
					and ci.class_id = md.class_id
					and md.class_name = 'manifest.Platform'
					and cir.to_ci_id = ci.ci_id
					and cir.relation_id = r.relation_id
					and r.relation_name = 'manifest.ComposedOf'
					and cira.ci_relation_id = cir.ci_relation_id
					and a.attribute_id = cira.attribute_id
					and a.attribute_name = 'enabled'
					and cira.dj_attribute_value = 'false'
				)
				and cir1.relation_id = r1.relation_id
				and r1.relation_name = 'manifest.Requires'
			) 
			and cir.from_ci_id = ci.ci_id
			and cir.relation_id = r.relation_id
			and r.relation_name = 'base.RealizedAs'
	 </select>
	 
	 <select id="getLinks" parameterType="map" resultType="com.oneops.cms.cm.domain.CmsLink">
		select fromci.ci_id as fromCiId, fromcl.class_name as fromClazzName, r.relation_name as relationName, toci.ci_id as toCiId, tocl.class_name as toClazzName
		  from cm_ci_relations cir, md_relations r, ns_namespaces ns, cm_ci fromci, md_classes fromcl, cm_ci toci, md_classes tocl
		where cir.relation_id = r.relation_id
		  and cir.ns_id = ns.ns_id
		  and ns.ns_path = #{nsPath}
		  and fromci.ci_id = cir.from_ci_id
		  and fromci.class_id = fromcl.class_id
		  and toci.ci_id = cir.to_ci_id
		  and toci.class_id = tocl.class_id
		  and (#{relName}::varchar is null or r.relation_name = #{relName})
	 </select>

	<insert id="createAltNs" parameterType="map" statementType="CALLABLE">
		{call cm_create_alt_namespace(#{nsId}, #{tag}, #{ciId})}
	</insert>

	<delete id="deleteAltNs" parameterType="long" statementType="CALLABLE">
		{call cm_delete_alt_namespace(#{nsId}, #{ciId})}
	</delete>

	<select id="getCmCIByAltNsAndTagNsLike" parameterType="map" useCache="false" resultType="com.oneops.cms.cm.domain.CmsCI">
		select
		ci.ci_id as ciId,
		ci.ci_name as ciName,
		ci.class_id as ciClassId,
		cl.class_name as ciClassName,
		cl.impl as impl,
		ci.ns_id as nsId,
		ns.ns_path as nsPath,
		ci.ci_goid as ciGoid,
		ci.comments,
		ci.ci_state_id as ciStateId,
		st.state_name as ciState,
		ci.last_applied_rfc_id as lastAppliedRfcId,
		ci.created_by as createdBy,
		ci.updated_by as updatedBy,
		ci.created,
		ci.updated
		from cm_ci ci, md_classes cl, ns_namespaces ns, cm_ci_state st, cm_ns_opt cno, ns_namespaces ns1, ns_opt_tag nt
		where (ns.ns_path like #{nsLike} or ns.ns_path = #{ns})
		and (#{clazzName}::varchar is null or cl.class_name = #{clazzName})
		and (#{shortClazz}::varchar is null or cl.short_class_name = #{shortClazz})
		and cno.ci_id = ci.ci_id
		and ci.class_id = cl.class_id
		and ci.ns_id = ns.ns_id
		and ns1.ns_id = cno.ns_id
		and nt.tag_id = cno.tag_id
		and (#{tag}::varchar is null or nt.tag = #{tag})
		and (#{altNs}::varchar is null or ns1.ns_path = #{altNs})
		and ci.ci_state_id = st.ci_state_id
	</select>

	<select id="getCmCIByAltNsAndTag" parameterType="map" useCache="false" resultType="com.oneops.cms.cm.domain.CmsCI">
	    select
			ci.ci_id as ciId,
			ci.ci_name as ciName,
			ci.class_id as ciClassId,
			cl.class_name as ciClassName,
			cl.impl as impl,
			ci.ns_id as nsId,
			ns.ns_path as nsPath,
			ci.ci_goid as ciGoid,
			ci.comments,
			ci.ci_state_id as ciStateId,
			st.state_name as ciState,
			ci.last_applied_rfc_id as lastAppliedRfcId,
			ci.created_by as createdBy,
			ci.updated_by as updatedBy,
			ci.created,
			ci.updated
		from cm_ci ci, md_classes cl, ns_namespaces ns, cm_ci_state st, cm_ns_opt cno, ns_namespaces ns1, ns_opt_tag nt
		where (#{ns}::varchar is null or ns.ns_path = #{ns})
			and (#{clazzName}::varchar is null or cl.class_name = #{clazzName})
			and (#{shortClazz}::varchar is null or cl.short_class_name = #{shortClazz})
			and cno.ci_id = ci.ci_id
			and ci.class_id = cl.class_id
			and ci.ns_id = ns.ns_id
			and ns1.ns_id = cno.ns_id
			and nt.tag_id = cno.tag_id
			and (#{tag}::varchar is null or nt.tag = #{tag})
			and (#{altNs}::varchar is null or ns1.ns_path = #{altNs})
			and ci.ci_state_id = st.ci_state_id
	</select>

	<select  id="getAltNsByCiAndTag" parameterType="map" useCache="false" resultType="com.oneops.cms.cm.domain.CmsAltNs">
		SELECT ns.ns_path as nsPath,
		nt.tag as tag,
		ns.ns_id as nsId
		FROM ns_namespaces ns, cm_ns_opt cno, ns_opt_tag nt
		where ns.ns_id = cno.ns_id
		and nt.tag_id = cno.tag_id
		and cno.ci_id = #{ciId}
		and (#{tag}::varchar is null or nt.tag = #{tag})
	</select>
	
	<select  id="getPlatformCiCount4PackTemplate" parameterType="map" useCache="false" resultType="long">
		<bind name="attrListSize" value="platAttrList.size()" />
		with platforms as (
			select ci.ci_id
			from cm_ci ci, md_classes md
			where ci.class_id = md.class_id
			  and md.class_name = #{platformClass}
			  and exists(
			    select 1 from (
			    	select count(1) as count
			  		from cm_ci_attributes attr, md_class_attributes mdattr
			  		where attr.ci_id = ci.ci_id
			  	  	  and attr.attribute_id = mdattr.attribute_id
			  	  	  and (
			  	  	  <foreach item="item" index="index" collection="platAttrList" open="(" close=")" separator="or"> 
				 		  mdattr.attribute_name = #{item.attributeName} and attr.df_attribute_value ${item.condition} #{item.avalue}
			  	  	  </foreach>
			  	  	  )
			    ) as t1
			    where count = #{attrListSize}
			  )
		)
		select count(1)
		from platforms pl, cm_ci_relations rel, md_relations mdrel, cm_ci_relation_attributes attr, md_relation_attributes mdattr
		where pl.ci_id = rel.from_ci_id
		  and rel.relation_id = mdrel.relation_id
		  and mdrel.relation_name = #{requiresRelation}
		  and rel.ci_relation_id = attr.ci_relation_id
		  and attr.attribute_id = mdattr.attribute_id
		  and mdattr.attribute_name = 'template'
		  and attr.df_attribute_value = #{tmplCiName}
	</select>

	<select  id="getPlatformRelCount4PackRel" parameterType="map" useCache="false" resultType="long">
		<bind name="attrListSize" value="platAttrList.size()" />
		with platforms as (
			select ci.ci_id
			from cm_ci ci, md_classes md
			where ci.class_id = md.class_id
			  and md.class_name = #{platformClass}
			  and exists(
			    select 1 from (
			    	select count(1) as count
			  		from cm_ci_attributes attr, md_class_attributes mdattr
			  		where attr.ci_id = ci.ci_id
			  	  	  and attr.attribute_id = mdattr.attribute_id
			  	  	  and (
			  	  	  <foreach item="item" index="index" collection="platAttrList" open="(" close=")" separator="or"> 
				 		  mdattr.attribute_name = #{item.attributeName} and attr.df_attribute_value ${item.condition} #{item.avalue}
			  	  	  </foreach>
			  	  	  )
			    ) as t1
			    where count = #{attrListSize}
			  )
		)
		select count(*) 
		from (
			select rel.to_ci_id ci_id, pl.ci_id pl_id
			from platforms pl, cm_ci_relations rel, md_relations mdrel, cm_ci_relation_attributes attr, md_relation_attributes mdattr
			where pl.ci_id = rel.from_ci_id
			  and rel.relation_id = mdrel.relation_id
			  and mdrel.relation_name = #{requiresRelation}
			  and rel.ci_relation_id = attr.ci_relation_id
			  and attr.attribute_id = mdattr.attribute_id
			  and mdattr.attribute_name = 'template'
			  and attr.df_attribute_value = #{fromTmplCiName}
		) as from_cis,
		   (select rel.to_ci_id ci_id, pl.ci_id pl_id
			from platforms pl, cm_ci_relations rel, md_relations mdrel, cm_ci_relation_attributes attr, md_relation_attributes mdattr
			where pl.ci_id = rel.from_ci_id
			  and rel.relation_id = mdrel.relation_id
			  and mdrel.relation_name = #{requiresRelation}
			  and rel.ci_relation_id = attr.ci_relation_id
			  and attr.attribute_id = mdattr.attribute_id
			  and mdattr.attribute_name = 'template'
			  and attr.df_attribute_value = #{toTmplCiName}
		) as to_cis, cm_ci_relations rel
		where from_cis.pl_id = to_cis.pl_id 
		   and rel.from_ci_id = from_cis.ci_id
		   and rel.to_ci_id = to_cis.ci_id
	</select>
</mapper>