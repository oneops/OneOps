<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.oneops.cms.dj.dal.DJMapper">

 	 <!--cache/-->

	 <select id="getNextDjId" useCache="false" resultType="long">
		select nextval('dj_pk_seq')
	 </select>

	 <select id="getNextCiId" useCache="false" resultType="long">
		select nextval('cm_pk_seq')
	 </select>

	 <select id="getReleaseStateId" parameterType="string" resultType="Integer">
		select release_state_id from dj_release_states 
		where state_name = #{value}
	 </select>

	 <select id="getRfcCiActionId" parameterType="string" resultType="Integer">
		select action_id from dj_rfc_ci_actions 
		where action_name = #{value}
	 </select>

     <!-- DJ Releases -->

	 <!--insert id="createRelease" parameterType="com.oneops.cms.dj.domain.CmsRelease">
	 	INSERT INTO dj_releases(
            release_id, ns_id, parent_release_id, release_name, created_by, release_state_id, release_type,
            description, revision)
    	VALUES (#{releaseId}, #{nsId}, #{parentReleaseId}, #{releaseName}, #{createdBy}, #{releaseStateId}, #{releaseType},
    		#{description}, #{revision});
	 </insert-->

	 <insert id="createRelease" parameterType="com.oneops.cms.dj.domain.CmsRelease" statementType="CALLABLE">
	    {call dj_create_release(#{releaseId}, #{nsId}, #{parentReleaseId}, #{releaseName}, #{createdBy}, #{releaseStateId}, #{releaseType}, #{description}, #{revision})}
	 </insert>


	 <update id="commitRelease" parameterType="map" statementType="CALLABLE">
	    {call dj_commit_release(#{releaseId}, #{setDfValue}, #{newCiState}, #{delete4real}, #{userId}, #{desc})}
	 </update> 

	 <update id="brushReleaseExecOrder" parameterType="long" statementType="CALLABLE">
	    {call dj_brush_exec_order(#{value})}
	 </update> 


	 <update id="updateRelease" parameterType="com.oneops.cms.dj.domain.CmsRelease" statementType="CALLABLE">
	 	{call dj_update_release(#{releaseId}, #{parentReleaseId}, #{releaseName}, #{releaseStateId}, #{commitedBy}, #{revision}, #{description})}
	 </update>

	 <delete id="deleteRelease" parameterType="long" statementType="CALLABLE">
	 	{call dj_delete_release (#{releaseId})}
	 </delete>


	 <select id="getReleaseById" parameterType="long" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRelease">
		SELECT r.release_id as releaseId, 
			   r.ns_id as nsId, 
			   r.parent_release_id as parentReleaseId,
			   ns.ns_path as nsPath,
			   r.release_name as releaseName, 
			   r.created_by as createdBy,
			   r.commited_by as commitedBy, 
			   r.release_state_id as releaseStateId,
			   rs.state_name as releaseState, 
			   r.release_type as releaseType,
       		   r.description, 
       		   r.revision, 
       		   r.created, 
       		   r.updated
  		FROM dj_releases r, ns_namespaces ns, dj_release_states rs
		where r.release_id = #{value}
			and r.ns_id = ns.ns_id
			and r.release_state_id = rs.release_state_id
	 </select>


	 <select id="getReleaseBy3" parameterType="map" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRelease">
		SELECT r.release_id as releaseId, 
			   r.ns_id as nsId, 
			   r.parent_release_id as parentReleaseId,
			   ns.ns_path as nsPath,
			   r.release_name as releaseName, 
			   r.created_by as createdBy, 
			   r.commited_by as commitedBy, 
			   r.release_state_id as releaseStateId,
			   rs.state_name as releaseState, 
			   r.release_type as releaseType,
       		   r.description, 
       		   r.revision, 
       		   r.created, 
       		   r.updated
  		FROM dj_releases r, ns_namespaces ns, dj_release_states rs
		where ns.ns_path = #{nsPath}
			and r.ns_id = ns.ns_id
			and (#{releaseName}::varchar is null or r.release_name = #{releaseName})
			and r.release_state_id = rs.release_state_id
			and (#{releaseState}::varchar is null or rs.state_name = #{releaseState})
		order by r.release_id desc	
	 </select>

	 <select id="getLatestRelease" parameterType="map" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRelease">
		SELECT r.release_id as releaseId, 
			   r.ns_id as nsId, 
			   r.parent_release_id as parentReleaseId,
			   ns.ns_path as nsPath,
			   r.release_name as releaseName, 
			   r.created_by as createdBy, 
			   r.commited_by as commitedBy,
			   r.release_state_id as releaseStateId,
			   rs.state_name as releaseState, 
			   r.release_type as releaseType,
       		   r.description, 
       		   r.revision, 
       		   r.created, 
       		   r.updated
  		FROM dj_releases r, ns_namespaces ns, dj_release_states rs
		where r.release_id = (select max(r1.release_id) from dj_releases r1, ns_namespaces ns1, dj_release_states rs1
		                      where ns1.ns_path = #{nsPath}
		                        and r1.ns_id = ns1.ns_id
		                        and r1.release_state_id = rs1.release_state_id
		                        and (#{releaseState}::varchar is null or rs1.state_name = #{releaseState})) 
			and r.ns_id = ns.ns_id
			and r.release_state_id = rs.release_state_id
	 </select>

     <!-- DJ RFC CIs -->


	<insert id="createRfcCI" parameterType="com.oneops.cms.dj.domain.CmsRfcCI" statementType="PREPARED">
  	INSERT INTO dj_rfc_ci(rfc_id, release_id, ci_id, ns_id, class_id, ci_name, ci_goid, action_id, execution_order, is_active_in_release, last_rfc_id, comments, created_by, hint)
    VALUES (#{rfcId} ,#{releaseId}, #{ciId}, #{nsId}, #{ciClassId}, #{ciName}, #{ciGoid}, #{rfcActionId}, #{execOrder}, true, #{lastAppliedRfcId}, #{comments}, #{createdBy}, #{hint})
	</insert>
	
	<insert id="createRfcLog"  parameterType="com.oneops.cms.dj.domain.CmsRfcCI" statementType="PREPARED">
		INSERT INTO cms_ci_event_queue(event_id, source_pk, source_name, event_type_id)
        	VALUES (nextval('event_pk_seq'), #{rfcId} , 'rfc_ci' , 100)
	</insert>
	
	<update id="updateRfcCI" parameterType="com.oneops.cms.dj.domain.CmsRfcCI" statementType="PREPARED">
		update dj_rfc_ci
   	    set ci_name = coalesce(#{ciName}, ci_name),
   	      release_id = coalesce(NULLIF(#{releaseId}, 0), release_id),
       	  execution_order = coalesce(#{execOrder}, execution_order),
	        comments = coalesce(#{comments}, comments),
	        updated_by = coalesce(#{updatedBy}, updated_by),
	        updated = now()
	     where rfc_id = #{rfcId};
	</update>
	<insert id="updateRfcLog"  parameterType="com.oneops.cms.dj.domain.CmsRfcCI" statementType="PREPARED">
	  	INSERT INTO cms_ci_event_queue(event_id, source_pk, source_name, event_type_id)
		VALUES (nextval('event_pk_seq'), #{rfcId}, 'rfc_ci' , 200);
	</insert>



	<update id="rmRfcCIfromRelease" parameterType="long" statementType="CALLABLE">
	    {call dj_rm_rfc_ci(#{value})}
	 </update>

	<update id="rmRfcRelationfromRelease" parameterType="long" statementType="PREPARED">
		update dj_rfc_relation
		set is_active_in_release = false,
			updated = now()
		where rfc_id = #{value};
	 </update> 


	 <delete id="deleteRfcCI" parameterType="long">
	     delete from dj_rfc_ci
	     where rfc_id = #{value}
	 </delete> 

	 <select id="getRfcCIById" parameterType="long" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcCI">
		SELECT 
			rci.rfc_id as rfcId, 
			rci.release_id as releaseId, 
			rci.ci_id as ciId, 
			rci.ns_id as nsId,
			ns.ns_path as nsPath, 
			rci.class_id as ciClassId,
			cl.class_name as ciClassName, 
			cl.impl as impl,
			rci.ci_name as ciName, 
			rci.ci_goid as ciGoid, 
		    rci.action_id as rfcActionId,
		    a.action_name as rfcAction, 
		    rci.execution_order as execOrder,
		    rci.is_active_in_release as isActiveInRelease,
		    rci.last_rfc_id as lastAppliedRfcId,
		    r.release_type as releaseType,
		    rci.comments,
		    rci.hint,
		    rci.created_by as createdBy,
		    rci.updated_by as updatedBy, 
		    rci.created_by as rfcCreatedBy,
		    rci.updated_by as rfcUpdatedBy, 
		    rci.created as rfcCreated,
		    rci.updated as rfcUpdated,
		    rci.created,
		    rci.updated
        FROM dj_rfc_ci rci, ns_namespaces ns, md_classes cl, dj_rfc_ci_actions a, dj_releases r
        where rci.rfc_id = #{value}
		  and rci.release_id = r.release_id
          and rci.ns_id = ns.ns_id
          and rci.class_id = cl.class_id
          and rci.action_id = a.action_id
	 </select>

	 <select id="getOpenRfcCIByCiId" parameterType="long" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcCI">
		SELECT 
			rci.rfc_id as rfcId, 
			rci.release_id as releaseId, 
			rci.ci_id as ciId, 
			rci.ns_id as nsId,
			ns.ns_path as nsPath, 
			rci.class_id as ciClassId,
			cl.class_name as ciClassName, 
			cl.impl as impl,
			rci.ci_name as ciName, 
			rci.ci_goid as ciGoid, 
		    rci.action_id as rfcActionId,
		    a.action_name as rfcAction, 
		    rci.execution_order as execOrder, 
		    rci.is_active_in_release as isActiveInRelease,
		    rci.last_rfc_id lastAppliedRfcId, 
		    r.release_type as releaseType,
		    rci.comments,
		    rci.hint,
		    rci.created_by as createdBy,
		    rci.updated_by as updatedBy, 
		    rci.created_by as rfcCreatedBy,
		    rci.updated_by as rfcUpdatedBy, 
		    rci.created as rfcCreated,
		    rci.updated as rfcUpdated,
		    rci.created,
		    rci.updated
        FROM dj_rfc_ci rci, ns_namespaces ns, md_classes cl, dj_rfc_ci_actions a, dj_releases r, dj_release_states rs
        where rci.ci_id = #{value}
          and rci.release_id = r.release_id
          and r.release_state_id = rs.release_state_id
          and rs.state_name = 'open'
          and rci.is_active_in_release = true
          and rci.ns_id = ns.ns_id
          and rci.class_id = cl.class_id
          and rci.action_id = a.action_id
	 </select>

	 <select id="getOpenRfcCIByCiIdList" parameterType="map" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcCI">
		SELECT 
			rci.rfc_id as rfcId, 
			rci.release_id as releaseId, 
			rci.ci_id as ciId, 
			rci.ns_id as nsId,
			ns.ns_path as nsPath, 
			rci.class_id as ciClassId,
			cl.class_name as ciClassName, 
			cl.impl as impl,
			rci.ci_name as ciName, 
			rci.ci_goid as ciGoid, 
		    rci.action_id as rfcActionId,
		    a.action_name as rfcAction, 
		    rci.execution_order as execOrder, 
		    rci.is_active_in_release as isActiveInRelease,
		    rci.last_rfc_id lastAppliedRfcId, 
		    r.release_type as releaseType,
		    rci.comments,
		    rci.created_by as createdBy,
		    rci.updated_by as updatedBy, 
		    rci.created_by as rfcCreatedBy,
		    rci.updated_by as rfcUpdatedBy, 
		    rci.created as rfcCreated,
		    rci.updated as rfcUpdated,
		    rci.created,
		    rci.updated
        FROM dj_rfc_ci rci, ns_namespaces ns, md_classes cl, dj_rfc_ci_actions a, dj_releases r, dj_release_states rs
        where rci.ci_id in 
			<foreach item="item" index="index" collection="ciIds" open="(" close=")" separator=", "> 
		         #{item} 
        	</foreach> 
          and rci.release_id = r.release_id
		  and (#{releaseId}::bigint is null or r.release_id = #{releaseId})
          and r.release_state_id = rs.release_state_id
          and rs.state_name = 'open'
          and rci.is_active_in_release = true
          and rci.ns_id = ns.ns_id
          and rci.class_id = cl.class_id
          and rci.action_id = a.action_id
	 </select>


	 <select id="getRfcCIBy3" parameterType="map" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcCI">
		SELECT 
			rci.rfc_id as rfcId, 
			rci.release_id as releaseId, 
			rci.ci_id as ciId, 
			rci.ns_id as nsId,
			ns.ns_path as nsPath, 
			rci.class_id as ciClassId,
			cl.class_name as ciClassName, 
			cl.impl as impl,
			rci.ci_name as ciName, 
			rci.ci_goid as ciGoid, 
		    rci.action_id as rfcActionId,
		    a.action_name as rfcAction, 
		    rci.execution_order as execOrder, 
		    rci.is_active_in_release as isActiveInRelease,
		    rci.last_rfc_id lastAppliedRfcId, 
		    r.release_type as releaseType,
		    rci.comments,
		    rci.created_by as createdBy,
		    rci.updated_by as updatedBy, 
		    rci.created_by as rfcCreatedBy,
		    rci.updated_by as rfcUpdatedBy, 
		    rci.created as rfcCreated,
		    rci.updated as rfcUpdated,
		    rci.created,
		    rci.updated
        FROM dj_rfc_ci rci, ns_namespaces ns, md_classes cl, dj_rfc_ci_actions a, dj_releases r
        where rci.release_id = #{releaseId}
          and rci.release_id = r.release_id
          and (#{isActive}::boolean is null or rci.is_active_in_release = #{isActive})
          and (#{ciId}::bigint is null or rci.ci_id = #{ciId})
          and rci.ns_id = ns.ns_id
          and rci.class_id = cl.class_id
          and rci.action_id = a.action_id
	 </select>


	 <select id="getRfcCIByClazzAndName" parameterType="map" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcCI">
		SELECT 
			rci.rfc_id as rfcId, 
			rci.release_id as releaseId, 
			rci.ci_id as ciId, 
			rci.ns_id as nsId,
			ns.ns_path as nsPath, 
			rci.class_id as ciClassId,
			cl.class_name as ciClassName, 
			cl.impl as impl,
			rci.ci_name as ciName, 
			rci.ci_goid as ciGoid, 
		    rci.action_id as rfcActionId,
		    a.action_name as rfcAction, 
		    rci.execution_order as execOrder, 
		    rci.is_active_in_release as isActiveInRelease,
		    rci.last_rfc_id lastAppliedRfcId, 
		    r.release_type as releaseType,
		    rci.comments,
		    rci.created_by as createdBy,
		    rci.updated_by as updatedBy, 
		    rci.created_by as rfcCreatedBy,
		    rci.updated_by as rfcUpdatedBy, 
		    rci.created as rfcCreated,
		    rci.updated as rfcUpdated,
		    rci.created,
		    rci.updated
        FROM dj_rfc_ci rci, ns_namespaces ns, md_classes cl, dj_rfc_ci_actions a, dj_releases r, dj_release_states rs
        where (#{ciName}::varchar is null or rci.ci_name = #{ciName})
          and (#{clazzName}::varchar is null or cl.class_name = #{clazzName})
          and rci.release_id = r.release_id
		  and r.release_state_id = rs.release_state_id
		  and (#{state}::varchar is null or rs.state_name = #{state})
          and (#{isActive}::boolean is null or rci.is_active_in_release = #{isActive})
          and rci.ns_id = ns.ns_id
          and ns.ns_path = #{nsPath}
          and rci.class_id = cl.class_id
          and rci.action_id = a.action_id
	 </select>

	 <select id="getOpenRfcCIByClazzAndNameLower" parameterType="map" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcCI">
		SELECT 
			rci.rfc_id as rfcId, 
			rci.release_id as releaseId, 
			rci.ci_id as ciId, 
			rci.ns_id as nsId,
			ns.ns_path as nsPath, 
			rci.class_id as ciClassId,
			cl.class_name as ciClassName, 
			cl.impl as impl,
			rci.ci_name as ciName, 
			rci.ci_goid as ciGoid, 
		    rci.action_id as rfcActionId,
		    a.action_name as rfcAction, 
		    rci.execution_order as execOrder, 
		    rci.is_active_in_release as isActiveInRelease,
		    rci.last_rfc_id lastAppliedRfcId, 
		    r.release_type as releaseType,
		    rci.comments,
		    rci.created_by as createdBy,
		    rci.updated_by as updatedBy, 
		    rci.created_by as rfcCreatedBy,
		    rci.updated_by as rfcUpdatedBy, 
		    rci.created as rfcCreated,
		    rci.updated as rfcUpdated,
		    rci.created,
		    rci.updated
        FROM dj_rfc_ci rci, ns_namespaces ns, md_classes cl, dj_rfc_ci_actions a, dj_releases r, dj_release_states rs
        where lower(rci.ci_name) = lower(#{ciName}) 
          and (#{clazzName}::varchar is null or cl.class_name = #{clazzName})
          and rci.release_id = r.release_id
		  and r.release_state_id = rs.release_state_id
		  and rs.state_name = 'open'
          and rci.is_active_in_release = true
          and rci.ns_id = ns.ns_id
          and ns.ns_path = #{nsPath}
          and rci.class_id = cl.class_id
          and rci.action_id = a.action_id
	 </select>


	 <select id="getOpenRfcCIByNsLike" parameterType="map" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcCI">
		SELECT 
			rci.rfc_id as rfcId, 
			rci.release_id as releaseId, 
			rci.ci_id as ciId, 
			rci.ns_id as nsId,
			ns.ns_path as nsPath, 
			rci.class_id as ciClassId,
			cl.class_name as ciClassName,
			cl.impl as impl, 
			rci.ci_name as ciName, 
			rci.ci_goid as ciGoid, 
		    rci.action_id as rfcActionId,
		    a.action_name as rfcAction, 
		    rci.execution_order as execOrder, 
		    rci.is_active_in_release as isActiveInRelease,
		    rci.last_rfc_id lastAppliedRfcId,
		    r.release_type as releaseType,
		    rci.comments,
		    rci.created_by as createdBy,
		    rci.updated_by as updatedBy, 
		    rci.created_by as rfcCreatedBy,
		    rci.updated_by as rfcUpdatedBy, 
		    rci.created as rfcCreated,
		    rci.updated as rfcUpdated,
		    rci.created,
		    rci.updated
        FROM dj_rfc_ci rci, ns_namespaces ns, md_classes cl, dj_rfc_ci_actions a, dj_releases r, dj_release_states rs
        where (ns.ns_path like #{nsLike} or ns.ns_path = #{ns})
          and (#{ciName}::varchar is null or rci.ci_name = #{ciName})
          and (#{clazzName}::varchar is null or cl.class_name = #{clazzName})
          and rci.release_id = r.release_id
		  and r.release_state_id = rs.release_state_id
		  and rs.state_name = 'open'
          and rci.is_active_in_release = true
          and rci.ns_id = ns.ns_id
          and rci.class_id = cl.class_id
          and rci.action_id = a.action_id
	 </select>


	 <select id="getOpenRfcCIByClazzAnd2Names" parameterType="map" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcCI">
		SELECT 
			rci.rfc_id as rfcId, 
			rci.release_id as releaseId, 
			rci.ci_id as ciId, 
			rci.ns_id as nsId,
			ns.ns_path as nsPath, 
			rci.class_id as ciClassId,
			cl.class_name as ciClassName,
			cl.impl as impl, 
			rci.ci_name as ciName, 
			rci.ci_goid as ciGoid, 
		    rci.action_id as rfcActionId,
		    a.action_name as rfcAction, 
		    rci.execution_order as execOrder, 
		    rci.is_active_in_release as isActiveInRelease,
		    rci.last_rfc_id lastAppliedRfcId,
		    r.release_type as releaseType,
		    rci.comments,
		    rci.created_by as createdBy,
		    rci.updated_by as updatedBy, 
		    rci.created_by as rfcCreatedBy,
		    rci.updated_by as rfcUpdatedBy, 
		    rci.created as rfcCreated,
		    rci.updated as rfcUpdated,
		    rci.created,
		    rci.updated
        FROM dj_rfc_ci rci, ns_namespaces ns, md_classes cl, dj_rfc_ci_actions a, dj_releases r, dj_release_states rs
        where rci.ci_name in (#{ciName}, #{altCiName})
          and cl.class_name = #{clazzName}
          and rci.release_id = r.release_id
		  and r.release_state_id = rs.release_state_id
		  and rs.state_name = 'open'
          and rci.is_active_in_release = true
          and rci.ns_id = ns.ns_id
          and ns.ns_path = #{nsPath}
          and rci.class_id = cl.class_id
          and rci.action_id = a.action_id
	 </select>

    <select id="getClosedRfcCIByCiId" parameterType="long" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcCI">
		SELECT
			rci.rfc_id as rfcId,
			rci.release_id as releaseId,
			rci.ci_id as ciId,
			rci.ns_id as nsId,
			ns.ns_path as nsPath,
			rci.class_id as ciClassId,
			cl.class_name as ciClassName,
			cl.impl as impl,
			rci.ci_name as ciName,
			rci.ci_goid as ciGoid,
		    rci.action_id as rfcActionId,
		    a.action_name as rfcAction,
		    rci.execution_order as execOrder,
		    rci.is_active_in_release as isActiveInRelease,
		    rci.last_rfc_id lastAppliedRfcId,
		    r.release_type as releaseType,
		    rci.comments,
		    rci.created_by as createdBy,
		    rci.updated_by as updatedBy,
		    rci.created_by as rfcCreatedBy,
		    rci.updated_by as rfcUpdatedBy,
		    rci.created as rfcCreated,
		    rci.updated as rfcUpdated,
		    rci.created,
		    rci.updated
        FROM dj_rfc_ci rci, ns_namespaces ns, md_classes cl, dj_rfc_ci_actions a, dj_releases r
        WHERE rci.ci_id = #{value}
          and rci.release_id = r.release_id
          and r.release_state_id = 200
          and rci.ns_id = ns.ns_id
          and rci.class_id = cl.class_id
          and rci.action_id = a.action_id
		ORDER BY rci.rfc_id desc
	 </select>

    <select id="getRollUpRfc" parameterType="map" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcCI">
		SELECT
			rci.rfc_id as rfcId,
			rci.release_id as releaseId,
			rci.ci_id as ciId,
			rci.ns_id as nsId,
			ns.ns_path as nsPath,
			rci.class_id as ciClassId,
			cl.class_name as ciClassName,
			cl.impl as impl,
			rci.ci_name as ciName,
			rci.ci_goid as ciGoid,
		    rci.action_id as rfcActionId,
		    a.action_name as rfcAction,
		    rci.execution_order as execOrder,
		    rci.is_active_in_release as isActiveInRelease,
		    rci.last_rfc_id lastAppliedRfcId,
		    r.release_type as releaseType,
		    rci.comments,
		    rci.created_by as createdBy,
		    rci.updated_by as updatedBy,
		    rci.created_by as rfcCreatedBy,
		    rci.updated_by as rfcUpdatedBy,
		    rci.created as rfcCreated,
		    rci.updated as rfcUpdated,
		    rci.created,
		    rci.updated
        FROM dj_rfc_ci rci, ns_namespaces ns, md_classes cl, dj_rfc_ci_actions a, dj_releases r, dj_release_states rs
        WHERE rci.ci_id = #{ciId}
          and rci.rfc_id &lt;= #{rfcId}
          and rci.release_id = r.release_id
          and r.release_state_id = rs.release_state_id
          and rs.state_name = 'close'
          and rci.ns_id = ns.ns_id
          and rci.class_id = cl.class_id
          and rci.action_id = a.action_id
		ORDER BY rci.rfc_id asc
    </select>



	<insert id="insertRfcCIAttribute" parameterType="com.oneops.cms.dj.domain.CmsRfcAttribute" statementType="CALLABLE">
		INSERT INTO dj_rfc_ci_attributes(
		rfc_attr_id, rfc_id, attribute_id, old_attribute_value, new_attribute_value, owner, comments)
		VALUES (nextval('dj_pk_seq'), #{rfcId}, #{attributeId}, (	select cia.df_attribute_value
		from cm_ci_attributes cia, dj_rfc_ci rfci
		where cia.ci_id = rfci.ci_id
		and rfci.rfc_id = #{rfcId}
		and cia.attribute_id = #{attributeId}),  #{newValue}, #{owner}, #{comments})
	</insert>

	<update id="updateRfcCIAttribute" parameterType="com.oneops.cms.dj.domain.CmsRfcAttribute" statementType="CALLABLE">
		update dj_rfc_ci_attributes 
		set new_attribute_value = #{newValue},
			old_attribute_value = (	select cia.df_attribute_value 
		from cm_ci_attributes cia, dj_rfc_ci rfci
		where cia.ci_id = rfci.ci_id
		  and rfci.rfc_id = #{rfcId}
		  and cia.attribute_id = #{attributeId}),
			owner = #{owner},
			comments = coalesce(#{comments},comments)
		where rfc_id = #{rfcId} and attribute_id = #{attributeId};
	</update>



	
	
	 <select id="getRfcCIAttributes" parameterType="long" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcAttribute">
		SELECT cia.rfc_attr_id as rfcAttributeId, 
			   cia.rfc_id as rfcId, 
			   cia.attribute_id as attributeId, 
			   ca.attribute_name as attributeName,
			   cia.old_attribute_value as oldValue, 
			   cia.new_attribute_value as newValue, 
			   cia.owner,
		       cia.comments, 
		       cia.created
		FROM dj_rfc_ci_attributes cia, md_class_attributes ca
		where cia.rfc_attr_id in (select max(a.rfc_attr_id) from dj_rfc_ci_attributes a where a.rfc_id = #{value} group by a.attribute_id) 
		  and cia.attribute_id = ca.attribute_id
	 </select>


	 <select id="getRfcCIAttributesByRfcIdList" parameterType="map" resultType="com.oneops.cms.dj.domain.CmsRfcAttribute">
		SELECT cia.rfc_attr_id as rfcAttributeId, 
			   cia.rfc_id as rfcId, 
			   cia.attribute_id as attributeId, 
			   ca.attribute_name as attributeName,
			   cia.old_attribute_value as oldValue, 
			   cia.new_attribute_value as newValue, 
			   cia.owner,
		       cia.comments, 
		       cia.created
		FROM dj_rfc_ci_attributes cia, md_class_attributes ca
		where cia.rfc_id in 
			<foreach item="item" index="index" collection="rfcIds" open="(" close=")" separator=", "> 
		         #{item} 
        	</foreach> 
		  and cia.attribute_id = ca.attribute_id
	 </select>

     <!-- DJ RFC Relations -->

	 <insert id="createRfcRelation" parameterType="com.oneops.cms.dj.domain.CmsRfcRelation" statementType="PREPARED">
           INSERT INTO dj_rfc_relation(
            rfc_id, release_id, ns_id, ci_relation_id, from_rfc_id, from_ci_id, relation_id, relation_goid, 
            to_ci_id, to_rfc_id, action_id, execution_order, is_active_in_release, last_rfc_id, comments, created_by)
   		   VALUES (#{rfcId}, #{releaseId}, #{nsId},  #{ciRelationId}, #{fromRfcId}, #{fromCiId}, #{relationId}, #{relationGoid}, 
            #{toCiId}, #{toRfcId},#{rfcActionId},  #{execOrder}, true, #{lastAppliedRfcId}, #{comments}, #{createdBy}); 
	 </insert> 
	
	<insert id="createRfcRelationLog" parameterType="com.oneops.cms.dj.domain.CmsRfcRelation" statementType="PREPARED">
		    INSERT INTO cms_ci_event_queue(event_id, source_pk, source_name, event_type_id)
    		VALUES (nextval('event_pk_seq'), #{rfcId}, 'rfc_relation' , 100);
	</insert>

	<update id="updateRfcRelation" parameterType="com.oneops.cms.dj.domain.CmsRfcRelation" statementType="PREPARED">
           update dj_rfc_relation
    set execution_order = coalesce(#{execOrder},execution_order),
        release_id = coalesce(#{releaseId}, release_id),
        comments = coalesce(#{comments},comments),
        updated_by = coalesce(#{updatedBy}, updated_by),
        updated = now()
    where rfc_id = #{rfcId};
	 </update>

	<update id="updateRfcRelationLog" parameterType="com.oneops.cms.dj.domain.CmsRfcRelation" statementType="PREPARED">
		   INSERT INTO cms_ci_event_queue(event_id, source_pk, source_name, event_type_id)
         VALUES (nextval('event_pk_seq'), #{rfcId}, 'rfc_relation' , 200);
	</update>


	<insert id="insertRfcRelationAttribute" parameterType="com.oneops.cms.dj.domain.CmsRfcAttribute" statementType="PREPARED">
	    INSERT INTO dj_rfc_relation_attributes(
		    rfc_attr_id, rfc_id, attribute_id, old_attribute_value, new_attribute_value, owner, comments) 
		    VALUES (nextval('dj_pk_seq'), #{rfcId}, #{attributeId},(select cra.df_attribute_value
		from  dj_rfc_relation rfc, cm_ci_relations cr, cm_ci_relation_attributes cra
		where rfc.rfc_id = #{rfcId}
		  and cr.from_ci_id = rfc.from_ci_id
		  and cr.relation_id = rfc.relation_id
		  and cr.to_ci_id = rfc.to_ci_id
		  and cra.ci_relation_id = cr.ci_relation_id
		  and cra.attribute_id = #{attributeId}), #{newValue}, #{owner}, #{comments})
	</insert>

	<update id="updateRfcRelationAttribute" parameterType="com.oneops.cms.dj.domain.CmsRfcAttribute" statementType="PREPARED">
		update dj_rfc_relation_attributes
		set new_attribute_value = #{newValue},
	    owner = #{owner},
	    comments = coalesce(#{comments},comments)
		where rfc_id = #{rfcId} 
         and attribute_id = #{attributeId}
	</update>
	
	 
	 <select id="getRfcRelationById" parameterType="long" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcRelation">
		SELECT rfr.rfc_id as rfcId, 
			   rfr.release_id as releaseId,
			   rfr.ns_id as nsId,
			   ns.ns_path as nsPath,
			   rfr.ci_relation_id as ciRelationId, 
			   rfr.from_rfc_id as fromRfcId, 
			   rfr.from_ci_id as fromCiId, 
			   rfr.relation_id as relationId,
			   rel.relation_name as relationName,
			   rfr.relation_goid as relationGoid, 
      		   rfr.to_ci_id as toCiId, 
      		   rfr.to_rfc_id as toRfcId, 
      		   rfr.action_id as rfcActionId, 
      		   a.action_name as rfcAction,
      		   rfr.execution_order as execOrder,
		       rfr.created_by as createdBy,
		       rfr.updated_by as updatedBy, 
		       rfr.created_by as rfcCreatedBy,
		       rfr.updated_by as rfcUpdatedBy, 
		       rfr.created as rfcCreated,
		       rfr.updated as rfcUpdated,
      		   rfr.is_active_in_release as isActiveInRelease, 
       		   rfr.last_rfc_id as lastAppliedRfcId,
       		   r.release_type as releaseType,
       		   rfr.comments,
       		   rfr.created,
       		   rfr.updated
        FROM dj_rfc_relation rfr, md_relations rel, dj_rfc_ci_actions a, ns_namespaces ns, dj_releases r
        where rfr.rfc_id = #{value}
          and rfr.release_id = r.release_id
          and rfr.relation_id = rel.relation_id
          and rfr.action_id = a.action_id
          and rfr.ns_id = ns.ns_id
	 </select>

	 <select id="getOpenRfcRelationByCiRelId" parameterType="long" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcRelation">
		SELECT rfr.rfc_id as rfcId, 
			   rfr.release_id as releaseId,
			   rfr.ns_id as nsId,
			   ns.ns_path as nsPath,
			   rfr.ci_relation_id as ciRelationId, 
			   rfr.from_rfc_id as fromRfcId, 
			   rfr.from_ci_id as fromCiId, 
			   rfr.relation_id as relationId,
			   rel.relation_name as relationName,
			   rfr.relation_goid as relationGoid, 
      		   rfr.to_ci_id as toCiId, 
      		   rfr.to_rfc_id as toRfcId, 
      		   rfr.action_id as rfcActionId, 
      		   a.action_name as rfcAction,
      		   rfr.execution_order as execOrder,
		       rfr.created_by as createdBy,
		       rfr.updated_by as updatedBy, 
		       rfr.created_by as rfcCreatedBy,
		       rfr.updated_by as rfcUpdatedBy, 
		       rfr.created as rfcCreated,
		       rfr.updated as rfcUpdated,
      		   rfr.is_active_in_release as isActiveInRelease, 
       		   rfr.last_rfc_id as lastAppliedRfcId,
       		   r.release_type as releaseType,
       		   rfr.comments,
       		   rfr.created
        FROM dj_rfc_relation rfr, md_relations rel, dj_rfc_ci_actions a, dj_releases r, dj_release_states rs, ns_namespaces ns
        where rfr.ci_relation_id = #{value}
          and rfr.release_id = r.release_id
          and r.release_state_id = rs.release_state_id
          and rs.state_name = 'open'
          and rfr.is_active_in_release = true
          and rfr.relation_id = rel.relation_id
          and rfr.action_id = a.action_id
          and rfr.ns_id = ns.ns_id
	 </select>

	 <select id="getClosedRfcRelationByCiId" parameterType="long" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcRelation">
		SELECT rfr.rfc_id as rfcId, 
			   rfr.release_id as releaseId,
			   rfr.ns_id as nsId,
			   ns.ns_path as nsPath,
			   rfr.ci_relation_id as ciRelationId, 
			   rfr.from_rfc_id as fromRfcId, 
			   rfr.from_ci_id as fromCiId, 
			   rfr.relation_id as relationId,
			   rel.relation_name as relationName,
			   rfr.relation_goid as relationGoid, 
      		   rfr.to_ci_id as toCiId, 
      		   rfr.to_rfc_id as toRfcId, 
      		   rfr.action_id as rfcActionId, 
      		   a.action_name as rfcAction,
      		   rfr.execution_order as execOrder,
		       rfr.created_by as createdBy,
		       rfr.updated_by as updatedBy, 
		       rfr.created_by as rfcCreatedBy,
		       rfr.updated_by as rfcUpdatedBy, 
		       rfr.created as rfcCreated,
		       rfr.updated as rfcUpdated,
      		   rfr.is_active_in_release as isActiveInRelease, 
       		   rfr.last_rfc_id as lastAppliedRfcId,
       		   r.release_type as releaseType,
       		   rfr.comments,
       		   rfr.created
        FROM dj_rfc_relation rfr, md_relations rel, dj_rfc_ci_actions a, dj_releases r, dj_release_states rs, ns_namespaces ns
        where (rfr.from_ci_id = #{value} or rfr.to_ci_id = #{value}) 
          and rfr.release_id = r.release_id
          and r.release_state_id = rs.release_state_id
          and rs.state_name = 'closed'
          and rfr.is_active_in_release = true
          and rfr.relation_id = rel.relation_id
          and rfr.action_id = a.action_id
          and rfr.ns_id = ns.ns_id
        order by rfr.rfc_id desc  
	 </select>


	 <select id="getRfcRelationByReleaseId" parameterType="long" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcRelation">
		SELECT rfr.rfc_id as rfcId, 
			   rfr.release_id as releaseId,
			   rfr.ns_id as nsId,
			   ns.ns_path as nsPath,
			   rfr.ci_relation_id as ciRelationId, 
			   rfr.from_rfc_id as fromRfcId, 
			   rfr.from_ci_id as fromCiId, 
			   rfr.relation_id as relationId,
			   rel.relation_name as relationName,
			   rfr.relation_goid as relationGoid, 
      		   rfr.to_ci_id as toCiId, 
      		   rfr.to_rfc_id as toRfcId, 
      		   rfr.action_id as rfcActionId, 
      		   a.action_name as rfcAction,
      		   rfr.execution_order as execOrder,
		       rfr.created_by as createdBy,
		       rfr.updated_by as updatedBy,
		       rfr.created_by as rfcCreatedBy,
		       rfr.updated_by as rfcUpdatedBy, 
		       rfr.created as rfcCreated,
		       rfr.updated as rfcUpdated,
      		   rfr.is_active_in_release as isActiveInRelease, 
       		   rfr.last_rfc_id as lastAppliedRfcId,
       		   r.release_type as releaseType,
       		   rfr.comments,
       		   rfr.created
        FROM dj_rfc_relation rfr, md_relations rel, dj_rfc_ci_actions a, ns_namespaces ns, dj_releases r
        where rfr.release_id = #{value}
          and rfr.release_id = r.release_id
          and rfr.is_active_in_release = true
          and rfr.relation_id = rel.relation_id
          and rfr.action_id = a.action_id
          and rfr.ns_id = ns.ns_id
	 </select>

	 <select id="getRfcRelationBy4" parameterType="map" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcRelation">
		SELECT rfr.rfc_id as rfcId, 
			   rfr.release_id as releaseId, 
			   rfr.ns_id as nsId,
			   ns.ns_path as nsPath,
			   rfr.ci_relation_id as ciRelationId,
			   rfr.from_rfc_id as fromRfcId, 
			   rfr.from_ci_id as fromCiId, 
			   rfr.relation_id as relationId,
			   rel.relation_name as relationName,
			   rfr.relation_goid as relationGoid, 
      		   rfr.to_ci_id as toCiId, 
      		   rfr.to_rfc_id as toRfcId, 
      		   rfr.action_id as rfcActionId, 
      		   a.action_name as rfcAction,
      		   rfr.execution_order as execOrder,
		       rfr.created_by as createdBy,
		       rfr.updated_by as updatedBy, 
		       rfr.created_by as rfcCreatedBy,
		       rfr.updated_by as rfcUpdatedBy, 
		       rfr.created as rfcCreated,
		       rfr.updated as rfcUpdated,
      		   rfr.is_active_in_release as isActiveInRelease, 
       		   rfr.last_rfc_id as lastAppliedRfcId, 
       		   r.release_type as releaseType,
       		   rfr.comments,
       		   rfr.created,
       		   rfr.updated
        FROM dj_rfc_relation rfr, md_relations rel, dj_rfc_ci_actions a, ns_namespaces ns, dj_releases r
        where rfr.release_id = #{releaseId}
          and rfr.release_id = r.release_id
          and (#{isActive}::boolean is null or rfr.is_active_in_release = #{isActive})
		  and (#{fromCiId}::bigint is null or rfr.from_ci_id = #{fromCiId})
		  and (#{toCiId}::bigint is null or rfr.to_ci_id = #{toCiId})
          and rfr.relation_id = rel.relation_id
          and rfr.action_id = a.action_id
          and rfr.ns_id = ns.ns_id
          
	 </select>

	 <select id="getOpenRfcRelationBy2" parameterType="map" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcRelation">
		SELECT rfr.rfc_id as rfcId, 
			   rfr.release_id as releaseId, 
			   rfr.ns_id as nsId,
			   ns.ns_path as nsPath,
			   rfr.ci_relation_id as ciRelationId,
			   rfr.from_rfc_id as fromRfcId, 
			   rfr.from_ci_id as fromCiId, 
			   rfr.relation_id as relationId,
			   rel.relation_name as relationName,
			   rfr.relation_goid as relationGoid, 
      		   rfr.to_ci_id as toCiId, 
      		   rfr.to_rfc_id as toRfcId, 
      		   rfr.action_id as rfcActionId, 
      		   a.action_name as rfcAction,
      		   rfr.execution_order as execOrder,
		       rfr.created_by as createdBy,
		       rfr.updated_by as updatedBy, 
		       rfr.created_by as rfcCreatedBy,
		       rfr.updated_by as rfcUpdatedBy, 
		       rfr.created as rfcCreated,
		       rfr.updated as rfcUpdated,
      		   rfr.is_active_in_release as isActiveInRelease, 
       		   rfr.last_rfc_id as lastAppliedRfcId,
       		   r.release_type as releaseType,
       		   rfr.comments,
       		   rfr.created
        FROM dj_rfc_relation rfr, md_relations rel, dj_rfc_ci_actions a, dj_releases r, dj_release_states rs, ns_namespaces ns
        where rfr.release_id = r.release_id
          and r.release_state_id = rs.release_state_id
          and rs.state_name = 'open'
          and rfr.is_active_in_release = true
		  and (#{fromCiId}::bigint is null or rfr.from_ci_id = #{fromCiId})
		  and (#{toCiId}::bigint is null or rfr.to_ci_id = #{toCiId})
          and rfr.relation_id = rel.relation_id
          and (#{relName}::varchar is null or rel.relation_name = #{relName})
          and (#{shortRelName}::varchar is null or rel.short_relation_name = #{shortRelName})
          and rfr.action_id = a.action_id
          and rfr.ns_id = ns.ns_id
 	 </select>

	 <select id="getFromRelativesByMultiRelationNames" parameterType="map" resultType="com.oneops.cms.dj.domain.CIRelative">
		select
		mdr.relation_name as relationName,
		cir.relation_id as relationId,
		cir.ci_relation_id as ciRelationId,
		cir.to_ci_id as relCiId,
		'ci' as type
		from cm_ci_relations cir, md_relations mdr, ns_namespaces ns
		where cir.from_ci_id = #{fromId}
		<if test="relationNames != null &amp;&amp; !relationNames.isEmpty()">
			and mdr.relation_name in  <foreach item="item" index="index" collection="relationNames" open="(" close=")" separator=", "> #{item} </foreach>
		</if>
		<if test="shortRelNames != null &amp;&amp; !shortRelNames.isEmpty()">
			and mdr.short_relation_name in <foreach item="item" index="index" collection="shortRelNames" open="(" close=")" separator=", "> #{item} </foreach>
		</if>
		and cir.relation_id = mdr.relation_id
		union
		select
		rel.relation_name as relationName,
		rfr.relation_id as relationId,
		rfr.ci_relation_id as ciRelationId,
		rfr.to_ci_id as relCiId,
		'rfc' as type
		from dj_rfc_relation rfr, md_relations rel, dj_releases r, dj_release_states rs
		where rfr.release_id = r.release_id
		and (#{releaseId}::bigint is null or r.release_id = #{releaseId})
		and r.release_state_id = rs.release_state_id
		and rs.state_name = 'open'
		and rfr.is_active_in_release = true
		and rfr.from_ci_id = #{fromId}
		and rfr.relation_id = rel.relation_id
		<if test="relationNames != null &amp;&amp; !relationNames.isEmpty()">
			and rel.relation_name in  <foreach item="item" index="index" collection="relationNames" open="(" close=")" separator=", "> #{item} </foreach>
		</if>
		<if test="shortRelNames != null &amp;&amp; !shortRelNames.isEmpty()">
			and rel.short_relation_name in <foreach item="item" index="index" collection="shortRelNames" open="(" close=")" separator=", "> #{item} </foreach>
		</if>
	 </select>

	 <select id="getToRelativesByMultiRelationNames" parameterType="map" resultType="com.oneops.cms.dj.domain.CIRelative">
		select
		rel.relation_name as relationName,
		rfr.relation_id as relationId,
		rfr.ci_relation_id as ciRelationId,
		rfr.from_ci_id as relCiId,
		'rfc' as type
		from dj_rfc_relation rfr, md_relations rel, dj_releases r, dj_release_states rs
		where rfr.release_id = r.release_id
		and (#{releaseId}::bigint is null or r.release_id = #{releaseId})
		and r.release_state_id = rs.release_state_id
		and rs.state_name = 'open'
		and rfr.is_active_in_release = true
		and rfr.to_ci_id = #{toId}
		and rfr.relation_id = rel.relation_id
		<if test="relationNames != null &amp;&amp; !relationNames.isEmpty()">
			and rel.relation_name in  <foreach item="item" index="index" collection="relationNames" open="(" close=")" separator=", "> #{item} </foreach>
		</if>
		<if test="shortRelNames != null &amp;&amp; !shortRelNames.isEmpty()">
			and rel.short_relation_name in <foreach item="item" index="index" collection="shortRelNames" open="(" close=")" separator=", "> #{item} </foreach>
		</if>
		union
		select
		mdr.relation_name as relationName,
		cir.relation_id as relationId,
		cir.ci_relation_id as ciRelationId,
		cir.from_ci_id as relCiId,
		'ci' as type
		from cm_ci_relations cir, md_relations mdr, ns_namespaces ns
		where cir.to_ci_id = #{toId}
		<if test="relationNames != null &amp;&amp; !relationNames.isEmpty()">
			and mdr.relation_name in  <foreach item="item" index="index" collection="relationNames" open="(" close=")" separator=", "> #{item} </foreach>
		</if>
		<if test="shortRelNames != null &amp;&amp; !shortRelNames.isEmpty()">
			and mdr.short_relation_name in <foreach item="item" index="index" collection="shortRelNames" open="(" close=")" separator=", "> #{item} </foreach>
		</if>
		and cir.relation_id = mdr.relation_id
	 </select>

	 <select id="getOpenFromRfcRelationByTargetClass" parameterType="map" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcRelation">
		SELECT rfr.rfc_id as rfcId, 
			   rfr.release_id as releaseId, 
			   rfr.ns_id as nsId,
			   ns.ns_path as nsPath,
			   rfr.ci_relation_id as ciRelationId,
			   rfr.from_rfc_id as fromRfcId, 
			   rfr.from_ci_id as fromCiId, 
			   rfr.relation_id as relationId,
			   rel.relation_name as relationName,
			   rfr.relation_goid as relationGoid, 
      		   rfr.to_ci_id as toCiId, 
      		   rfr.to_rfc_id as toRfcId, 
      		   rfr.action_id as rfcActionId, 
      		   a.action_name as rfcAction,
      		   rfr.execution_order as execOrder,
		       rfr.created_by as createdBy,
		       rfr.updated_by as updatedBy, 
		       rfr.created_by as rfcCreatedBy,
		       rfr.updated_by as rfcUpdatedBy, 
		       rfr.created as rfcCreated,
		       rfr.updated as rfcUpdated,
      		   rfr.is_active_in_release as isActiveInRelease, 
       		   rfr.last_rfc_id as lastAppliedRfcId,
       		   r.release_type as releaseType,
       		   rfr.comments,
       		   rfr.created
        FROM dj_rfc_relation rfr, md_relations rel, dj_rfc_ci_actions a, dj_releases r, dj_release_states rs, ns_namespaces ns
        where rfr.release_id = r.release_id
          and r.release_state_id = rs.release_state_id
          and rs.state_name = 'open'
          and rfr.is_active_in_release = true
          and rfr.from_ci_id = #{fromCiId}
          and rfr.relation_id = rel.relation_id
          and (#{relName}::varchar is null or rel.relation_name = #{relName})
          and (#{shortRelName}::varchar is null or rel.short_relation_name = #{shortRelName})
          and rfr.action_id = a.action_id
          and rfr.ns_id = ns.ns_id
          and (exists(select 1 from dj_rfc_ci rci1, md_classes cl1 
          			  where rci1.release_id = rfr.release_id 
          			   and rci1.ci_id = rfr.to_ci_id 
          			   and rci1.class_id = cl1.class_id
          			   and cl1.class_name = #{targetClassName})
          	   or exists (select 1 from cm_ci ci, md_classes cl2
          	              where ci.ci_id = rfr.to_ci_id
          	                and ci.class_id = cl2.class_id
          	                and cl2.class_name = #{targetClassName})
          	   )               		   
 	 </select>

	 <select id="getOpenToRfcRelationByTargetClass" parameterType="map" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcRelation">
		SELECT rfr.rfc_id as rfcId, 
			   rfr.release_id as releaseId, 
			   rfr.ns_id as nsId,
			   ns.ns_path as nsPath,
			   rfr.ci_relation_id as ciRelationId,
			   rfr.from_rfc_id as fromRfcId, 
			   rfr.from_ci_id as fromCiId, 
			   rfr.relation_id as relationId,
			   rel.relation_name as relationName,
			   rfr.relation_goid as relationGoid, 
      		   rfr.to_ci_id as toCiId, 
      		   rfr.to_rfc_id as toRfcId, 
      		   rfr.action_id as rfcActionId, 
      		   a.action_name as rfcAction,
      		   rfr.execution_order as execOrder,
		       rfr.created_by as createdBy,
		       rfr.updated_by as updatedBy, 
		       rfr.created_by as rfcCreatedBy,
		       rfr.updated_by as rfcUpdatedBy, 
		       rfr.created as rfcCreated,
		       rfr.updated as rfcUpdated,
      		   rfr.is_active_in_release as isActiveInRelease, 
       		   rfr.last_rfc_id as lastAppliedRfcId,
       		   r.release_type as releaseType,
       		   rfr.comments,
       		   rfr.created
        FROM dj_rfc_relation rfr, md_relations rel, dj_rfc_ci_actions a, dj_releases r, dj_release_states rs, ns_namespaces ns
        where rfr.release_id = r.release_id
          and r.release_state_id = rs.release_state_id
          and rs.state_name = 'open'
          and rfr.is_active_in_release = true
          and rfr.to_ci_id = #{toCiId}
          and rfr.relation_id = rel.relation_id
          and (#{relName}::varchar is null or rel.relation_name = #{relName})
          and (#{shortRelName}::varchar is null or rel.short_relation_name = #{shortRelName})
          and rfr.action_id = a.action_id
          and rfr.ns_id = ns.ns_id
          and (exists(select 1 from dj_rfc_ci rci1, md_classes cl1 
          			  where rci1.release_id = rfr.release_id 
          			   and rci1.ci_id = rfr.from_ci_id 
          			   and rci1.class_id = cl1.class_id
          			   and cl1.class_name = #{targetClassName})
          	   or exists (select 1 from cm_ci ci, md_classes cl2
          	              where ci.ci_id = rfr.from_ci_id
          	                and ci.class_id = cl2.class_id
          	                and cl2.class_name = #{targetClassName})
          	   )               		   
 	 </select>

	 <select id="getRfcRelationBy3" parameterType="map" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcRelation">
		SELECT rfr.rfc_id as rfcId, 
			   rfr.release_id as releaseId, 
			   rfr.ns_id as nsId,
			   ns.ns_path as nsPath,
			   rfr.ci_relation_id as ciRelationId,
			   rfr.from_rfc_id as fromRfcId, 
			   rfr.from_ci_id as fromCiId, 
			   rfr.relation_id as relationId,
			   rel.relation_name as relationName,
			   rfr.relation_goid as relationGoid, 
      		   rfr.to_ci_id as toCiId, 
      		   rfr.to_rfc_id as toRfcId, 
      		   rfr.action_id as rfcActionId, 
      		   a.action_name as rfcAction,
      		   rfr.execution_order as execOrder,
		       rfr.created_by as createdBy,
		       rfr.updated_by as updatedBy,
		       rfr.created_by as rfcCreatedBy,
		       rfr.updated_by as rfcUpdatedBy, 
		       rfr.created as rfcCreated,
		       rfr.updated as rfcUpdated, 
      		   rfr.is_active_in_release as isActiveInRelease, 
       		   rfr.last_rfc_id as lastAppliedRfcId,
       		   r.release_type as releaseType,
       		   rfr.comments,
       		   rfr.created,
       		   rfr.updated
        FROM dj_rfc_relation rfr, md_relations rel, dj_rfc_ci_actions a, ns_namespaces ns, dj_releases r
        where rfr.release_id = #{releaseId}
          and rfr.release_id = r.release_id
          and (#{isActive}::boolean is null or rfr.is_active_in_release = #{isActive})
		  and (#{ciRelationId}::bigint is null or rfr.ci_relation_id = #{ciRelationId})
          and rfr.relation_id = rel.relation_id
          and rfr.action_id = a.action_id
          and rfr.ns_id = ns.ns_id
	 </select>

	 <select id="getRfcRelationByReleaseAndClass" parameterType="map" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcRelation">
		SELECT rfr.rfc_id as rfcId, 
			   rfr.release_id as releaseId, 
			   rfr.ns_id as nsId,
			   ns.ns_path as nsPath,
			   rfr.ci_relation_id as ciRelationId,
			   rfr.from_rfc_id as fromRfcId, 
			   rfr.from_ci_id as fromCiId, 
			   rfr.relation_id as relationId,
			   rel.relation_name as relationName,
			   rfr.relation_goid as relationGoid, 
      		   rfr.to_ci_id as toCiId, 
      		   rfr.to_rfc_id as toRfcId, 
      		   rfr.action_id as rfcActionId, 
      		   a.action_name as rfcAction,
      		   rfr.execution_order as execOrder,
		       rfr.created_by as createdBy,
		       rfr.updated_by as updatedBy,
		       rfr.created_by as rfcCreatedBy,
		       rfr.updated_by as rfcUpdatedBy, 
		       rfr.created as rfcCreated,
		       rfr.updated as rfcUpdated, 
      		   rfr.is_active_in_release as isActiveInRelease, 
       		   rfr.last_rfc_id as lastAppliedRfcId,
       		   r.release_type as releaseType,
       		   rfr.comments,
       		   rfr.created
        FROM dj_rfc_relation rfr, md_relations rel, dj_rfc_ci_actions a, ns_namespaces ns, dj_releases r
        where rfr.release_id = #{releaseId}
          and rfr.release_id = r.release_id
          and rfr.is_active_in_release = true
          and rfr.relation_id = rel.relation_id
          and (#{relationName}::varchar is null or rel.relation_name = #{relationName})
          and (#{shortRelName}::varchar is null or rel.short_relation_name = #{shortRelName})
          and rfr.action_id = a.action_id
          and rfr.ns_id = ns.ns_id
	 </select>

	 <select id="getRfcRelationsByNs" parameterType="map" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcRelation">
		SELECT rfr.rfc_id as rfcId, 
			   rfr.release_id as releaseId, 
			   rfr.ns_id as nsId,
			   ns.ns_path as nsPath,
			   rfr.ci_relation_id as ciRelationId,
			   rfr.from_rfc_id as fromRfcId, 
			   rfr.from_ci_id as fromCiId, 
			   rfr.relation_id as relationId,
			   rel.relation_name as relationName,
			   rfr.relation_goid as relationGoid, 
      		   rfr.to_ci_id as toCiId, 
      		   rfr.to_rfc_id as toRfcId, 
      		   rfr.action_id as rfcActionId, 
      		   a.action_name as rfcAction,
      		   rfr.execution_order as execOrder,
		       rfr.created_by as createdBy,
		       rfr.updated_by as updatedBy, 
		       rfr.created_by as rfcCreatedBy,
		       rfr.updated_by as rfcUpdatedBy, 
		       rfr.created as rfcCreated,
		       rfr.updated as rfcUpdated,
      		   rfr.is_active_in_release as isActiveInRelease, 
       		   rfr.last_rfc_id as lastAppliedRfcId,
       		   r.release_type as releaseType,
       		   rfr.comments,
       		   rfr.created
        FROM dj_rfc_relation rfr, md_relations rel, dj_rfc_ci_actions a, dj_releases r, dj_release_states rs, ns_namespaces ns
        where rfr.release_id = r.release_id
          and r.release_state_id = rs.release_state_id
          and (#{state}::varchar is null or rs.state_name = #{state})
          and (#{isActive}::boolean is null or rfr.is_active_in_release = #{isActive})
          and rfr.relation_id = rel.relation_id
          and rfr.action_id = a.action_id
          and rfr.ns_id = ns.ns_id
          and ns.ns_path = #{nsPath}   
	 </select>


	 <select id="getOpenRfcRelations" parameterType="map" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcRelation">
		SELECT rfr.rfc_id as rfcId, 
			   rfr.release_id as releaseId, 
			   rfr.ns_id as nsId,
			   ns.ns_path as nsPath,
			   rfr.ci_relation_id as ciRelationId,
			   rfr.from_rfc_id as fromRfcId, 
			   rfr.from_ci_id as fromCiId, 
			   rfr.relation_id as relationId,
			   rel.relation_name as relationName,
			   rfr.relation_goid as relationGoid, 
      		   rfr.to_ci_id as toCiId, 
      		   rfr.to_rfc_id as toRfcId, 
      		   rfr.action_id as rfcActionId, 
      		   a.action_name as rfcAction,
      		   rfr.execution_order as execOrder,
		       rfr.created_by as createdBy,
		       rfr.updated_by as updatedBy, 
		       rfr.created_by as rfcCreatedBy,
		       rfr.updated_by as rfcUpdatedBy, 
		       rfr.created as rfcCreated,
		       rfr.updated as rfcUpdated,
      		   rfr.is_active_in_release as isActiveInRelease, 
       		   rfr.last_rfc_id as lastAppliedRfcId,
       		   r.release_type as releaseType,
       		   rfr.comments,
       		   rfr.created
        FROM dj_rfc_relation rfr, md_relations rel, dj_rfc_ci_actions a, dj_releases r, dj_release_states rs, ns_namespaces ns
        where rfr.release_id = r.release_id
          and r.release_state_id = rs.release_state_id
          and rs.state_name = 'open'
          and rfr.is_active_in_release = true
          and rfr.relation_id = rel.relation_id
          and (#{relationName}::varchar is null or rel.relation_name = #{relationName})
          and (#{shortRelName}::varchar is null or rel.short_relation_name = #{shortRelName})
          and rfr.action_id = a.action_id
          and rfr.ns_id = ns.ns_id
          and (#{nsPath}::varchar is null or ns.ns_path = #{nsPath})
          and (exists(select 1 from dj_rfc_ci rci1, md_classes cl1 
          			  where rci1.release_id = rfr.release_id 
          			   and rci1.ci_id = rfr.from_ci_id 
          			   and rci1.class_id = cl1.class_id
          			   and (#{fromClazzName}::varchar is null or cl1.class_name = #{fromClazzName}))
          	   or exists (select 1 from cm_ci ci, md_classes cl2
          	              where ci.ci_id = rfr.from_ci_id
          	                and ci.class_id = cl2.class_id
          	                and (#{fromClazzName}::varchar is null or cl2.class_name = #{fromClazzName}))
          	   )               		   
          and (exists(select 1 from dj_rfc_ci rci1, md_classes cl1 
          			  where rci1.release_id = rfr.release_id 
          			   and rci1.ci_id = rfr.to_ci_id 
          			   and rci1.class_id = cl1.class_id
          			   and (#{toClazzName}::varchar is null or cl1.class_name = #{toClazzName}))
          	   or exists (select 1 from cm_ci ci, md_classes cl2
          	              where ci.ci_id = rfr.to_ci_id
          	                and ci.class_id = cl2.class_id
          			   		and (#{toClazzName}::varchar is null or cl2.class_name = #{toClazzName}))
          	                
          	   )               		   
	 </select>


	 <select id="getOpenRfcRelationsNsLike" parameterType="map" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcRelation">
		SELECT rfr.rfc_id as rfcId, 
			   rfr.release_id as releaseId, 
			   rfr.ns_id as nsId,
			   ns.ns_path as nsPath,
			   rfr.ci_relation_id as ciRelationId,
			   rfr.from_rfc_id as fromRfcId, 
			   rfr.from_ci_id as fromCiId, 
			   rfr.relation_id as relationId,
			   rel.relation_name as relationName,
			   rfr.relation_goid as relationGoid, 
      		   rfr.to_ci_id as toCiId, 
      		   rfr.to_rfc_id as toRfcId, 
      		   rfr.action_id as rfcActionId, 
      		   a.action_name as rfcAction,
      		   rfr.execution_order as execOrder,
		       rfr.created_by as createdBy,
		       rfr.updated_by as updatedBy, 
		       rfr.created_by as rfcCreatedBy,
		       rfr.updated_by as rfcUpdatedBy, 
		       rfr.created as rfcCreated,
		       rfr.updated as rfcUpdated,
      		   rfr.is_active_in_release as isActiveInRelease, 
       		   rfr.last_rfc_id as lastAppliedRfcId,
       		   r.release_type as releaseType,
       		   rfr.comments,
       		   rfr.created
        FROM dj_rfc_relation rfr, md_relations rel, dj_rfc_ci_actions a, dj_releases r, dj_release_states rs, ns_namespaces ns
        where rfr.release_id = r.release_id
          and (ns.ns_path like #{nsLike} or ns.ns_path = #{ns})   
          and r.release_state_id = rs.release_state_id
          and rs.state_name = 'open'
          and rfr.is_active_in_release = true
          and rfr.relation_id = rel.relation_id
          and (#{relationName}::varchar is null or rel.relation_name = #{relationName})
          and (#{shortRelName}::varchar is null or rel.short_relation_name = #{shortRelName})
          and rfr.action_id = a.action_id
          and rfr.ns_id = ns.ns_id
          and (exists(select 1 from dj_rfc_ci rci1, md_classes cl1 
          			  where rci1.release_id = rfr.release_id 
          			   and rci1.ci_id = rfr.from_ci_id 
          			   and rci1.class_id = cl1.class_id
          			   and (#{fromClazzName}::varchar is null or cl1.class_name = #{fromClazzName}))
          			   
          	   or exists (select 1 from cm_ci ci, md_classes cl2
          	              where ci.ci_id = rfr.from_ci_id
          	                and ci.class_id = cl2.class_id
          			   		and (#{fromClazzName}::varchar is null or cl2.class_name = #{fromClazzName}))
          	   )               		   
          and (exists(select 1 from dj_rfc_ci rci1, md_classes cl1 
          			  where rci1.release_id = rfr.release_id 
          			   and rci1.ci_id = rfr.to_ci_id 
          			   and rci1.class_id = cl1.class_id
          			   and (#{toClazzName}::varchar is null or cl1.class_name = #{toClazzName}))
          			   
          	   or exists (select 1 from cm_ci ci, md_classes cl2
          	              where ci.ci_id = rfr.to_ci_id
          	                and ci.class_id = cl2.class_id
          			   		and (#{toClazzName}::varchar is null or cl2.class_name = #{toClazzName}))
          	   )               		   
	 </select>


	 <select id="getRfcRelationAttributes" parameterType="long" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcAttribute">
		SELECT cia.rfc_attr_id as rfcAttributeId, 
			   cia.rfc_id as rfcId, 
			   cia.attribute_id as attributeId, 
			   ca.attribute_name as attributeName,
			   cia.old_attribute_value as oldValue, 
			   cia.new_attribute_value as newValue, 
			   cia.owner,
		       cia.comments, 
		       cia.created
		FROM dj_rfc_relation_attributes cia, md_relation_attributes ca
		where cia.rfc_attr_id in (select max(a.rfc_attr_id) from dj_rfc_relation_attributes a where a.rfc_id = #{value} group by a.attribute_id) 
		  and cia.attribute_id = ca.attribute_id
	 </select>


	 <select id="getRfcRelationAttributesByRfcIdList" parameterType="map" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcAttribute">
		SELECT cia.rfc_attr_id as rfcAttributeId, 
			   cia.rfc_id as rfcId, 
			   cia.attribute_id as attributeId, 
			   ca.attribute_name as attributeName,
			   cia.old_attribute_value as oldValue, 
			   cia.new_attribute_value as newValue, 
			   cia.owner,
		       cia.comments, 
		       cia.created
		FROM dj_rfc_relation_attributes cia, md_relation_attributes ca
		where cia.rfc_id in 
			<foreach item="item" index="index" collection="rfcIds" open="(" close=")" separator=", "> 
		         #{item} 
        	</foreach> 
		  and cia.attribute_id = ca.attribute_id
		 </select>

	 <select id="getLinkedRfcRelationId" parameterType="map" useCache="false" resultType="Long">
		SELECT rfr.rfc_id 
        FROM dj_rfc_relation rfr
        where rfr.release_id = #{releaseId}
          and (#{isActive}::boolean is null or rfr.is_active_in_release = #{isActive})
          and (rfr.from_rfc_id = #{rfcId} or rfr.to_rfc_id = #{rfcId})
	 </select>


	 <select id="getOpenFromRfcRelationByAttrs" parameterType="map" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcRelation">
		SELECT rfr.rfc_id as rfcId, 
			   rfr.release_id as releaseId, 
			   rfr.ns_id as nsId,
			   ns.ns_path as nsPath,
			   rfr.ci_relation_id as ciRelationId,
			   rfr.from_rfc_id as fromRfcId, 
			   rfr.from_ci_id as fromCiId, 
			   rfr.relation_id as relationId,
			   rel.relation_name as relationName,
			   rfr.relation_goid as relationGoid, 
      		   rfr.to_ci_id as toCiId, 
      		   rfr.to_rfc_id as toRfcId, 
      		   rfr.action_id as rfcActionId, 
      		   a.action_name as rfcAction,
      		   rfr.execution_order as execOrder,
		       rfr.created_by as createdBy,
		       rfr.updated_by as updatedBy, 
		       rfr.created_by as rfcCreatedBy,
		       rfr.updated_by as rfcUpdatedBy, 
		       rfr.created as rfcCreated,
		       rfr.updated as rfcUpdated,
      		   rfr.is_active_in_release as isActiveInRelease, 
       		   rfr.last_rfc_id as lastAppliedRfcId, 
       		   r.release_type as releaseType,
       		   rfr.comments,
       		   rfr.created
        FROM dj_rfc_relation rfr, md_relations rel, dj_rfc_ci_actions a, dj_releases r, dj_release_states rs, ns_namespaces ns
        where rfr.release_id = r.release_id
          and r.release_state_id = rs.release_state_id
          and rs.state_name = 'open'
          and rfr.is_active_in_release = true
          and rfr.from_ci_id = #{fromCiId}
          and rfr.relation_id = rel.relation_id
          and (#{relName}::varchar is null or rel.relation_name = #{relName})
          and (#{shortRelName}::varchar is null or rel.short_relation_name = #{shortRelName})
          and rfr.action_id = a.action_id
          and rfr.ns_id = ns.ns_id
          and (exists(select 1 from dj_rfc_ci rci1, md_classes cl1 
          			  where rci1.release_id = rfr.release_id 
          			   and rci1.ci_id = rfr.to_ci_id 
          			   and rci1.class_id = cl1.class_id
          			   and cl1.class_name = #{targetClassName})
          	   or exists (select 1 from cm_ci ci, md_classes cl2
          	              where ci.ci_id = rfr.to_ci_id
          	                and ci.class_id = cl2.class_id
          	                and cl2.class_name = #{targetClassName})
          	   )               		   
          <foreach item="item" index="index" collection="attrList" open="and" separator="and"> 
		 		exists (select 1 from dj_rfc_relation_attributes rfra, md_relation_attributes mra 
				         where rfra.rfc_id = rfr.rfc_id 
					       and rfra.attribute_id = mra.attribute_id 
					       and mra.attribute_name = #{item.attributeName} 
					       and rfra.new_attribute_value = #{item.newValue})  
          </foreach> 
 	 </select>

	 <select id="getOpenToRfcRelationByAttrs" parameterType="map" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcRelation">
		SELECT rfr.rfc_id as rfcId, 
			   rfr.release_id as releaseId, 
			   rfr.ns_id as nsId,
			   ns.ns_path as nsPath,
			   rfr.ci_relation_id as ciRelationId,
			   rfr.from_rfc_id as fromRfcId, 
			   rfr.from_ci_id as fromCiId, 
			   rfr.relation_id as relationId,
			   rel.relation_name as relationName,
			   rfr.relation_goid as relationGoid, 
      		   rfr.to_ci_id as toCiId, 
      		   rfr.to_rfc_id as toRfcId, 
      		   rfr.action_id as rfcActionId, 
      		   a.action_name as rfcAction,
      		   rfr.execution_order as execOrder,
		       rfr.created_by as createdBy,
		       rfr.updated_by as updatedBy, 
		       rfr.created_by as rfcCreatedBy,
		       rfr.updated_by as rfcUpdatedBy, 
		       rfr.created as rfcCreated,
		       rfr.updated as rfcUpdated,
      		   rfr.is_active_in_release as isActiveInRelease, 
       		   rfr.last_rfc_id as lastAppliedRfcId, 
       		   r.release_type as releaseType,
       		   rfr.comments,
       		   rfr.created
        FROM dj_rfc_relation rfr, md_relations rel, dj_rfc_ci_actions a, dj_releases r, dj_release_states rs, ns_namespaces ns
        where rfr.release_id = r.release_id
          and r.release_state_id = rs.release_state_id
          and rs.state_name = 'open'
          and rfr.is_active_in_release = true
          and rfr.to_ci_id = #{toCiId}
          and rfr.relation_id = rel.relation_id
          and (#{relName}::varchar is null or rel.relation_name = #{relName})
          and (#{shortRelName}::varchar is null or rel.short_relation_name = #{shortRelName})
          and rfr.action_id = a.action_id
          and rfr.ns_id = ns.ns_id
          and (exists(select 1 from dj_rfc_ci rci1, md_classes cl1 
          			  where rci1.release_id = rfr.release_id 
          			   and rci1.ci_id = rfr.from_ci_id 
          			   and rci1.class_id = cl1.class_id
          			   and cl1.class_name = #{targetClassName})
          	   or exists (select 1 from cm_ci ci, md_classes cl2
          	              where ci.ci_id = rfr.from_ci_id
          	                and ci.class_id = cl2.class_id
          	                and cl2.class_name = #{targetClassName})
          	   )               		   
          <foreach item="item" index="index" collection="attrList" open="and" separator="and"> 
		 		exists (select 1 from dj_rfc_relation_attributes rfra, md_relation_attributes mra 
				         where rfra.rfc_id = rfr.rfc_id 
					       and rfra.attribute_id = mra.attribute_id 
					       and mra.attribute_name = #{item.attributeName} 
					       and rfra.new_attribute_value = #{item.newValue})  
          </foreach> 
 	 </select>

	 <select id="getOpenRfcLinks" parameterType="map" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcLink">
			select distinct rr.rfc_id as rfcId, r.relation_name as relationName, rfca.action_name as action,
			coalesce(from_rc.ci_id, from_ci.ci_id) as fromCiId, 
			(select fromcl.class_name from md_classes fromcl where fromcl.class_id = coalesce(from_rc.class_id, from_ci.class_id)) as fromClazzName,
			coalesce(to_rc.ci_id, to_ci.ci_id) as toCiId, 
			(select tocl.class_name from md_classes tocl where tocl.class_id = coalesce(to_rc.class_id, to_ci.class_id)) as toClazzName
			from dj_rfc_relation rr
			  join md_relations r on rr.relation_id = r.relation_id
			  join ns_namespaces ns on rr.ns_id = ns.ns_id
			  join dj_releases rls on rr.release_id = rls.release_id
			  join dj_release_states rs on rls.release_state_id = rs.release_state_id
			  join dj_rfc_ci_actions rfca on rr.action_id = rfca.action_id
  			  left join dj_rfc_ci to_rc on rr.to_ci_id = to_rc.ci_id
			  left join cm_ci to_ci on rr.to_ci_id = to_ci.ci_id
			  left join dj_rfc_ci from_rc on rr.from_ci_id = from_rc.ci_id
			  left join cm_ci from_ci on rr.from_ci_id = from_ci.ci_id
			where ns.ns_path = #{nsPath}
			and rs.state_name = 'open'
			and (#{relName}::varchar is null or r.relation_name = #{relName})
				 
	</select>

	 <select id="countCiRfcByReleaseId" parameterType="long" useCache="false" resultType="long">
		SELECT count(1)
		from dj_rfc_ci
		where release_id = #{value}
	 </select>

	<select id="countOpenRfcCisByNs" parameterType="string" useCache="false" resultType="long">
		SELECT count(1)
		  FROM dj_rfc_ci rci, dj_releases r, dj_release_states rs, ns_namespaces ns
		 WHERE rci.release_id = r.release_id
		   AND r.release_state_id = rs.release_state_id
		   AND rs.state_name = 'open'
		   AND rci.is_active_in_release = true
		   AND rci.ns_id = ns.ns_id
           AND ns.ns_path = #{value}
	</select>

	<select id="countOpenRfcRelationsByNs" parameterType="string" useCache="false" resultType="long">
		SELECT count(1)
          FROM dj_rfc_relation rfr, dj_releases r, dj_release_states rs, ns_namespaces ns
         WHERE rfr.release_id = r.release_id
           AND r.release_state_id = rs.release_state_id
           AND rs.state_name = 'open'
           AND rfr.is_active_in_release = true
           AND rfr.ns_id = ns.ns_id
           AND ns.ns_path = #{value}
	 </select>
    
    <update id="rmRfcs" parameterType="map" statementType="CALLABLE">
       {#{result,jdbcType=INTEGER,mode=OUT} = call dj_rm_rfcs(#{nsPath})}
    </update>
    
    <select id="countCiNotUpdatedByRfc" parameterType="map" useCache="false" resultType="long">
		select count(cir.to_ci_id)
		from cm_ci_relations cir, md_relations mdr, cm_ci_relation_attributes attr, md_relation_attributes mdra
		where cir.from_ci_id = #{fromCiId}
			and (#{relationName}::varchar is null or mdr.relation_name = #{relationName})
			and (#{shortRelName}::varchar is null or mdr.short_relation_name = #{shortRelName})
			and cir.relation_id = mdr.relation_id
			and attr.ci_relation_id = cir.ci_relation_id
			and mdra.attribute_name = 'last_manifest_rfc'
			and attr.attribute_id = mdra.attribute_id
			and attr.dj_attribute_value::bigint &lt; #{rfcId}
	</select>

	 <select id="getReleaseByFilter" parameterType="com.oneops.cms.util.TimelineQueryParam" useCache="false" resultType="com.oneops.cms.dj.domain.TimelineRelease">
		select r.release_id as releaseId,
			r.ns_id as nsId,
			r.parent_release_id as parentReleaseId,
			ns.ns_path as nsPath,
			r.release_name as releaseName,
			r.created_by as createdBy,
			r.commited_by as commitedBy,
			r.release_state_id as releaseStateId,
			rs.state_name as releaseState,
			r.release_type as releaseType,
			r.description,
			r.revision,
			r.created,
			r.updated
		from dj_releases r, ns_namespaces ns, dj_release_states rs
		where r.release_id in (
				select distinct rfc.release_id
				from dj_rfc_ci rfc, md_classes md
				where rfc.ns_id in 
					<foreach item="item" index="index" collection="releaseScopeNsIds" open="(" close=")" separator=", ">#{item}</foreach>
				  and rfc.class_id = md.class_id
				  and (
				    (#{wildcardFilter}::varchar is null or rfc.ci_name like #{wildcardFilter})
				    or
				    (#{releaseClassFilter}::varchar is null or lower(md.class_name) like lower(#{releaseClassFilter}))
				    <if test="nsIdsMatchingFilter != null &amp;&amp; !nsIdsMatchingFilter.isEmpty()">
						or
						(rfc.ns_id in 
							<foreach item="item" index="index" collection="nsIdsMatchingFilter" open="(" close=")" separator=", ">#{item}</foreach>
						)
				    </if>
				  )
				  and (#{releaseOffset}::bigint is null or rfc.release_id ${order.aboveOperator} #{releaseOffset})
				  and (#{endRelId}::bigint is null or rfc.release_id ${order.belowOperator}= #{endRelId})
				  order by rfc.release_id ${order.sort}
				  <if test="endRelId == null">
				    limit coalesce(#{limit},10)
				  </if>
		  )
		  and r.ns_id = ns.ns_id
		  and r.release_state_id = rs.release_state_id
		  <if test="releaseList != null &amp;&amp; !releaseList.isEmpty()">
		     union
		     select r.release_id as releaseId,
			   r.ns_id as nsId,
			   r.parent_release_id as parentReleaseId,
			   ns.ns_path as nsPath,
			   r.release_name as releaseName,
			   r.created_by as createdBy,
			   r.commited_by as commitedBy,
			   r.release_state_id as releaseStateId,
			   rs.state_name as releaseState,
			   r.release_type as releaseType,
			   r.description,
			   r.revision,
			   r.created,
			   r.updated
		    from dj_releases r, ns_namespaces ns, dj_release_states rs
		    where r.release_id in
		      <foreach item="item" index="index" collection="releaseList" open="(" close=")" separator=", ">#{item}</foreach>
		      and r.ns_id = ns.ns_id
		      and r.release_state_id = rs.release_state_id
		  </if>
	 </select>


	<select id="getRfcCIsAppliedBetweenTwoReleases" parameterType="map" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcCI">
		SELECT 
			rci.rfc_id as rfcId, 
			rci.release_id as releaseId, 
			rci.ci_id as ciId, 
			rci.ns_id as nsId,
			ns1.ns_path as nsPath,  
			rci.class_id as ciClassId,
			cl.class_name as ciClassName, 
			cl.impl as impl,
			rci.ci_name as ciName, 
			rci.ci_goid as ciGoid, 
		    rci.action_id as rfcActionId,
		    a.action_name as rfcAction, 
		    rci.execution_order as execOrder, 
		    rci.is_active_in_release as isActiveInRelease,
		    rci.last_rfc_id lastAppliedRfcId, 
		    r.release_type as releaseType,
		    rci.comments,
		    rci.created_by as createdBy,
		    rci.updated_by as updatedBy, 
		    rci.created_by as rfcCreatedBy,
		    rci.updated_by as rfcUpdatedBy, 
		    rci.created as rfcCreated,
		    rci.updated as rfcUpdated,
		    rci.created,
		    rci.updated
        FROM dj_rfc_ci rci, ns_namespaces ns, md_classes cl, dj_rfc_ci_actions a, dj_releases r, dj_release_states rs, ns_namespaces ns1
        where r.release_id &gt; #{fromReleaseId} 
          and ((r.release_id &lt; #{toReleaseId} and rs.state_name ='closed') or ((r.release_id = #{toReleaseId})))
          and rci.release_id = r.release_id
          and rci.is_active_in_release = 'true'
          and rci.ns_id = ns1.ns_id
          and r.ns_id = ns.ns_id
          and ns.ns_path = #{nsPath}
          and rci.class_id = cl.class_id
          and rci.action_id = a.action_id
          and r.release_state_id = rs.release_state_id
		  
          order by rci.release_id, rci.rfc_id
	</select>

	<select id="getRfcRelationsAppliedBetweenTwoReleases" parameterType="map" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcRelation">
		SELECT rfr.rfc_id as rfcId,
		rfr.release_id as releaseId,
		rfr.ns_id as nsId,
		ns1.ns_path as nsPath,
		rfr.ci_relation_id as ciRelationId,
		rfr.from_rfc_id as fromRfcId,
		rfr.from_ci_id as fromCiId,
		rfr.relation_id as relationId,
		rel.relation_name as relationName,
		rfr.relation_goid as relationGoid,
		rfr.to_ci_id as toCiId,
		rfr.to_rfc_id as toRfcId,
		rfr.action_id as rfcActionId,
		a.action_name as rfcAction,
		rfr.execution_order as execOrder,
		rfr.created_by as createdBy,
		rfr.updated_by as updatedBy,
		rfr.created_by as rfcCreatedBy,
		rfr.updated_by as rfcUpdatedBy,
		rfr.created as rfcCreated,
		rfr.updated as rfcUpdated,
		rfr.is_active_in_release as isActiveInRelease,
		rfr.last_rfc_id as lastAppliedRfcId,
		r.release_type as releaseType,
		rfr.comments,
		rfr.created,
		rfr.updated
		FROM dj_rfc_relation rfr, md_relations rel, dj_rfc_ci_actions a, ns_namespaces ns, dj_releases r, dj_release_states rs, ns_namespaces ns1
		where r.release_id &gt; #{fromReleaseId} 
        AND ((r.release_id &lt; #{toReleaseId} and rs.state_name ='closed') or r.release_id = #{toReleaseId})
		and rfr.release_id = r.release_id
		and rfr.is_active_in_release = 'true'
		and rfr.relation_id = rel.relation_id
		and rfr.action_id = a.action_id
		and rfr.ns_id = ns1.ns_id
		and r.ns_id = ns.ns_id
        and ns.ns_path = #{nsPath}
		and r.release_state_id = rs.release_state_id
		
        order by rfr.release_id, rfr.rfc_id
	</select>

	<select id="getReleaseWithOnlyRelationsByFilter" parameterType="com.oneops.cms.util.TimelineQueryParam" useCache="false" resultType="com.oneops.cms.dj.domain.TimelineRelease">
		select r.release_id as releaseId,
			r.ns_id as nsId,
			r.parent_release_id as parentReleaseId,
			ns.ns_path as nsPath,
			r.release_name as releaseName,
			r.created_by as createdBy,
			r.commited_by as commitedBy,
			r.release_state_id as releaseStateId,
			rs.state_name as releaseState,
			r.release_type as releaseType,
			r.description,
			r.revision,
			r.created,
			r.updated
		from dj_releases r, ns_namespaces ns, dj_release_states rs
		where r.release_id in (
			select distinct rfc.release_id
			from dj_rfc_relation rfc, cm_ci from_ci, md_classes from_md, cm_ci to_ci, md_classes to_md
			where rfc.ns_id in 
				<foreach item="item" index="index" collection="releaseScopeNsIds" open="(" close=")" separator=", ">#{item}</foreach>
			  and rfc.from_ci_id = from_ci.ci_id
			  and from_ci.class_id = from_md.class_id
			  and rfc.to_ci_id = to_ci.ci_id
			  and to_ci.class_id = to_md.class_id
			  <if test="excludeReleaseList != null &amp;&amp; !excludeReleaseList.isEmpty()">
				and rfc.release_id not in <foreach item="item" index="index" collection="excludeReleaseList" open="(" close=")" separator=", ">#{item}</foreach>
			  </if>
			  and (
			    (#{wildcardFilter}::varchar is null or from_ci.ci_name like #{wildcardFilter} or to_ci.ci_name like #{wildcardFilter})
			    or
			    (#{releaseClassFilter}::varchar is null or lower(from_md.class_name) like lower(#{releaseClassFilter}) or lower(to_md.class_name) like lower(#{releaseClassFilter}))

			    <if test="nsIdsMatchingFilter != null &amp;&amp; !nsIdsMatchingFilter.isEmpty()">
				    or
				    (rfc.ns_id in  
						<foreach item="item" index="index" collection="nsIdsMatchingFilter" open="(" close=")" separator=", ">#{item}</foreach>
				    )
				</if>
			  )
			  and (#{releaseOffset}::bigint is null or rfc.release_id ${order.aboveOperator} #{releaseOffset})
			  and (#{endRelId}::bigint is null or rfc.release_id ${order.belowOperator}= #{endRelId})
			order by rfc.release_id ${order.sort}
			<if test="endRelId == null">
				limit coalesce(#{limit},10)
			</if>
		)
		and r.ns_id = ns.ns_id
		and r.release_state_id = rs.release_state_id
	</select>

	<select id="getReleaseByNsPath" parameterType="com.oneops.cms.util.TimelineQueryParam" useCache="false" resultType="com.oneops.cms.dj.domain.TimelineRelease">
		select r.release_id as releaseId,
			r.ns_id as nsId,
			r.parent_release_id as parentReleaseId,
			ns.ns_path as nsPath,
			r.release_name as releaseName,
			r.created_by as createdBy,
			r.commited_by as commitedBy,
			r.release_state_id as releaseStateId,
			rs.state_name as releaseState,
			r.release_type as releaseType,
			r.description,
			r.revision,
			r.created,
			r.updated
		from dj_releases r, ns_namespaces ns, dj_release_states rs
		where r.ns_id = ns.ns_id
		  <choose>
    		<when test="releaseNs != null &amp;&amp; releaseNs.length() > 0">
      			and ns.ns_path = #{releaseNs}
    		</when>
    		<otherwise>
      			and ns.ns_path like #{releaseNsLike}
    		</otherwise>
    	  </choose>
		  and r.release_state_id = rs.release_state_id
		  and (#{releaseOffset}::bigint is null or r.release_id ${order.aboveOperator} #{releaseOffset})
		  and (#{endRelId}::bigint is null or r.release_id ${order.belowOperator}= #{endRelId})
		order by r.release_id ${order.sort}
		<if test="endRelId == null">
			limit coalesce(#{limit},10)
		</if>
	</select>

	<insert id="createAltNs" parameterType="map" statementType="CALLABLE">
		{call dj_create_alt_namespace(#{nsId}, #{tag}, #{rfcId})}
	</insert>


	<delete id="deleteAltNs" parameterType="long" statementType="CALLABLE">
		{call dj_delete_alt_namespace(#{nsId}, #{rfcId})}
	</delete>



	<select id="getRfcCIByAltNsAndTag" parameterType="map" useCache="false" resultType="com.oneops.cms.dj.domain.CmsRfcCI">
		SELECT
		rci.rfc_id as rfcId,
		rci.release_id as releaseId,
		rci.ci_id as ciId,
		rci.ns_id as nsId,
		ns.ns_path as nsPath,
		rci.class_id as ciClassId,
		cl.class_name as ciClassName,
		cl.impl as impl,
		rci.ci_name as ciName,
		rci.ci_goid as ciGoid,
		rci.action_id as rfcActionId,
		a.action_name as rfcAction,
		rci.execution_order as execOrder,
		rci.is_active_in_release as isActiveInRelease,
		rci.last_rfc_id lastAppliedRfcId,
		r.release_type as releaseType,
		rci.comments,
		rci.created_by as createdBy,
		rci.updated_by as updatedBy,
		rci.created_by as rfcCreatedBy,
		rci.updated_by as rfcUpdatedBy,
		rci.created as rfcCreated,
		rci.updated as rfcUpdated,
		rci.created,
		rci.updated
		FROM dj_rfc_ci rci, ns_namespaces ns, md_classes cl, dj_rfc_ci_actions a, dj_releases r, dj_ns_opt dno, ns_namespaces ns1, ns_opt_tag nt
		where rci.release_id = r.release_id
		and (#{tag}::varchar is null or nt.tag = #{tag})
		and (#{nsPath}::varchar is null or ns1.ns_path = #{nsPath})
		and (#{isActive}::boolean is null or rci.is_active_in_release = #{isActive})
		and (#{releaseId}::bigint is null or rci.release_id = #{releaseId})
		and (#{ciId}::bigint is null or rci.ci_id = #{ciId})
		and rci.ns_id = ns.ns_id
		and rci.class_id = cl.class_id
		and rci.action_id = a.action_id
		and ns1.ns_id = dno.ns_id
		and dno.rfc_id = rci.rfc_id
		and dno.tag_id = nt.tag_id
	</select>

	<select  id="getAltNsBy" parameterType="long" useCache="false" resultType="com.oneops.cms.cm.domain.CmsAltNs">
		SELECT ns.ns_path as nsPath,
		nt.tag,
		ns.ns_id as nsId
		FROM ns_namespaces ns, dj_ns_opt dno, ns_opt_tag nt
		where ns.ns_id = dno.ns_id
		and dno.tag_id = nt.tag_id
		and dno.rfc_id = #{rfcId}
	</select>
</mapper>
