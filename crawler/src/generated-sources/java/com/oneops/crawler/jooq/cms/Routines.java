/*
 * This file is generated by jOOQ.
*/
package com.oneops.crawler.jooq.cms;


import com.oneops.crawler.jooq.cms.routines.CmAddCiAttribute;
import com.oneops.crawler.jooq.cms.routines.CmAddCiRelAttribute;
import com.oneops.crawler.jooq.cms.routines.CmCreateAltNamespace;
import com.oneops.crawler.jooq.cms.routines.CmCreateCi1;
import com.oneops.crawler.jooq.cms.routines.CmCreateCi2;
import com.oneops.crawler.jooq.cms.routines.CmCreateOpsAction;
import com.oneops.crawler.jooq.cms.routines.CmCreateOpsProcedure;
import com.oneops.crawler.jooq.cms.routines.CmCreateRelation1;
import com.oneops.crawler.jooq.cms.routines.CmCreateRelation2;
import com.oneops.crawler.jooq.cms.routines.CmDeleteAltNamespace;
import com.oneops.crawler.jooq.cms.routines.CmDeleteCi1;
import com.oneops.crawler.jooq.cms.routines.CmDeleteCi2;
import com.oneops.crawler.jooq.cms.routines.CmDeleteCi3;
import com.oneops.crawler.jooq.cms.routines.CmDeleteRelation;
import com.oneops.crawler.jooq.cms.routines.CmIsOpenedReleaseForCi;
import com.oneops.crawler.jooq.cms.routines.CmIsOpsProcedureActiveForCi;
import com.oneops.crawler.jooq.cms.routines.CmUpdateCi1;
import com.oneops.crawler.jooq.cms.routines.CmUpdateCi2;
import com.oneops.crawler.jooq.cms.routines.CmUpdateCiAttribute;
import com.oneops.crawler.jooq.cms.routines.CmUpdateOpsActionState;
import com.oneops.crawler.jooq.cms.routines.CmUpdateOpsProcedureState;
import com.oneops.crawler.jooq.cms.routines.CmUpdateRel;
import com.oneops.crawler.jooq.cms.routines.CmUpdateRelAttribute;
import com.oneops.crawler.jooq.cms.routines.CmVacNs1;
import com.oneops.crawler.jooq.cms.routines.CmVacNs2;
import com.oneops.crawler.jooq.cms.routines.CmsAcquireLock;
import com.oneops.crawler.jooq.cms.routines.CmsSetVar1;
import com.oneops.crawler.jooq.cms.routines.CmsSetVar2;
import com.oneops.crawler.jooq.cms.routines.CopyOverAutoFlags;
import com.oneops.crawler.jooq.cms.routines.DjBrushExecOrder;
import com.oneops.crawler.jooq.cms.routines.DjCancelDeployment1;
import com.oneops.crawler.jooq.cms.routines.DjCancelDeployment2;
import com.oneops.crawler.jooq.cms.routines.DjCommitRelease;
import com.oneops.crawler.jooq.cms.routines.DjCommitReleaseCis;
import com.oneops.crawler.jooq.cms.routines.DjCommitReleaseRelations;
import com.oneops.crawler.jooq.cms.routines.DjCompleteDeployment;
import com.oneops.crawler.jooq.cms.routines.DjCreateDpmtApproval;
import com.oneops.crawler.jooq.cms.routines.DjCreateRelease1;
import com.oneops.crawler.jooq.cms.routines.DjCreateRelease2;
import com.oneops.crawler.jooq.cms.routines.DjCreateRfcCi;
import com.oneops.crawler.jooq.cms.routines.DjCreateRfcRelation;
import com.oneops.crawler.jooq.cms.routines.DjDeleteRelease;
import com.oneops.crawler.jooq.cms.routines.DjDeployRelease1;
import com.oneops.crawler.jooq.cms.routines.DjDeployRelease2;
import com.oneops.crawler.jooq.cms.routines.DjDeployRelease3;
import com.oneops.crawler.jooq.cms.routines.DjDeployRelease4;
import com.oneops.crawler.jooq.cms.routines.DjDeployRelease5;
import com.oneops.crawler.jooq.cms.routines.DjDpmtApprove;
import com.oneops.crawler.jooq.cms.routines.DjDpmtUpdApprovlaRec;
import com.oneops.crawler.jooq.cms.routines.DjPromoteRfcCi;
import com.oneops.crawler.jooq.cms.routines.DjPromoteRfcRelations;
import com.oneops.crawler.jooq.cms.routines.DjResetFailedRecords;
import com.oneops.crawler.jooq.cms.routines.DjRetryDeployment1;
import com.oneops.crawler.jooq.cms.routines.DjRetryDeployment2;
import com.oneops.crawler.jooq.cms.routines.DjRmRfcCi;
import com.oneops.crawler.jooq.cms.routines.DjRmRfcRel;
import com.oneops.crawler.jooq.cms.routines.DjRmRfcs;
import com.oneops.crawler.jooq.cms.routines.DjUpdDeployment1;
import com.oneops.crawler.jooq.cms.routines.DjUpdDeployment2;
import com.oneops.crawler.jooq.cms.routines.DjUpdDeployment3;
import com.oneops.crawler.jooq.cms.routines.DjUpdDeployment4;
import com.oneops.crawler.jooq.cms.routines.DjUpdDeploymentState;
import com.oneops.crawler.jooq.cms.routines.DjUpdDpmtRecordState;
import com.oneops.crawler.jooq.cms.routines.DjUpdateRelease;
import com.oneops.crawler.jooq.cms.routines.DjUpdateRfcCi1;
import com.oneops.crawler.jooq.cms.routines.DjUpdateRfcCi2;
import com.oneops.crawler.jooq.cms.routines.DjUpdateRfcRelation1;
import com.oneops.crawler.jooq.cms.routines.DjUpdateRfcRelation2;
import com.oneops.crawler.jooq.cms.routines.DjUpsertRfcCiAttr;
import com.oneops.crawler.jooq.cms.routines.DjUpsertRfcRelAttr;
import com.oneops.crawler.jooq.cms.routines.ForceCompleteDpmt;
import com.oneops.crawler.jooq.cms.routines.MdAddClassAction1;
import com.oneops.crawler.jooq.cms.routines.MdAddClassAction2;
import com.oneops.crawler.jooq.cms.routines.MdAddClassAttribute1;
import com.oneops.crawler.jooq.cms.routines.MdAddClassAttribute2;
import com.oneops.crawler.jooq.cms.routines.MdAddRelationAttribute;
import com.oneops.crawler.jooq.cms.routines.MdAddRelationTarget;
import com.oneops.crawler.jooq.cms.routines.MdCreateClass1;
import com.oneops.crawler.jooq.cms.routines.MdCreateClass2;
import com.oneops.crawler.jooq.cms.routines.MdCreateRelation;
import com.oneops.crawler.jooq.cms.routines.MdDeleteClass;
import com.oneops.crawler.jooq.cms.routines.MdDeleteClassAction;
import com.oneops.crawler.jooq.cms.routines.MdDeleteClassAttribute;
import com.oneops.crawler.jooq.cms.routines.MdDeleteRelation;
import com.oneops.crawler.jooq.cms.routines.MdDeleteRelationAttribute;
import com.oneops.crawler.jooq.cms.routines.MdDeleteRelationTarget;
import com.oneops.crawler.jooq.cms.routines.MdUpdateClass1;
import com.oneops.crawler.jooq.cms.routines.MdUpdateClass2;
import com.oneops.crawler.jooq.cms.routines.MdUpdateClassAction1;
import com.oneops.crawler.jooq.cms.routines.MdUpdateClassAction2;
import com.oneops.crawler.jooq.cms.routines.MdUpdateClassAttribute1;
import com.oneops.crawler.jooq.cms.routines.MdUpdateClassAttribute2;
import com.oneops.crawler.jooq.cms.routines.MdUpdateRelation;
import com.oneops.crawler.jooq.cms.routines.MdUpdateRelationAttribute;
import com.oneops.crawler.jooq.cms.routines.NsCreateNamespace;
import com.oneops.crawler.jooq.cms.routines.NsDeleteNamespace;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.Field;


/**
 * Convenience access to all stored procedures and functions in kloopzcm
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Routines {

    /**
     * Call <code>kloopzcm.cm_add_ci_attribute</code>
     */
    public static Long cmAddCiAttribute(Configuration configuration, Long pCiId, Integer pAttributeId, String pDfValue, String pDjValue, String pOwner, String pComments, Boolean pEvent) {
        CmAddCiAttribute p = new CmAddCiAttribute();
        p.setPCiId(pCiId);
        p.setPAttributeId(pAttributeId);
        p.setPDfValue(pDfValue);
        p.setPDjValue(pDjValue);
        p.setPOwner(pOwner);
        p.setPComments(pComments);
        p.setPEvent(pEvent);

        p.execute(configuration);
        return p.getOutCiAttrId();
    }

    /**
     * Call <code>kloopzcm.cm_add_ci_rel_attribute</code>
     */
    public static Long cmAddCiRelAttribute(Configuration configuration, Long pCiRelId, Integer pAttributeId, String pDfValue, String pDjValue, String pOwner, String pComments, Boolean pEvent) {
        CmAddCiRelAttribute p = new CmAddCiRelAttribute();
        p.setPCiRelId(pCiRelId);
        p.setPAttributeId(pAttributeId);
        p.setPDfValue(pDfValue);
        p.setPDjValue(pDjValue);
        p.setPOwner(pOwner);
        p.setPComments(pComments);
        p.setPEvent(pEvent);

        p.execute(configuration);
        return p.getOutCiRelAttrId();
    }

    /**
     * Call <code>kloopzcm.cm_create_alt_namespace</code>
     */
    public static void cmCreateAltNamespace(Configuration configuration, Long pNsId, String pTag, Long pCiId) {
        CmCreateAltNamespace p = new CmCreateAltNamespace();
        p.setPNsId(pNsId);
        p.setPTag(pTag);
        p.setPCiId(pCiId);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.cm_create_ci</code>
     */
    public static void cmCreateCi1(Configuration configuration, Long pCiId, Long pNsId, Integer pClassId, String pGoid, String pCiName, String pComments, Integer pStateId, String pCreatedBy) {
        CmCreateCi1 p = new CmCreateCi1();
        p.setPCiId(pCiId);
        p.setPNsId(pNsId);
        p.setPClassId(pClassId);
        p.setPGoid(pGoid);
        p.setPCiName(pCiName);
        p.setPComments(pComments);
        p.setPStateId(pStateId);
        p.setPCreatedBy(pCreatedBy);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.cm_create_ci</code>
     */
    public static void cmCreateCi2(Configuration configuration, Long pCiId, Long pNsId, Integer pClassId, String pGoid, String pCiName, String pComments, Integer pStateId, Long pLastRfcId, String pCreatedBy) {
        CmCreateCi2 p = new CmCreateCi2();
        p.setPCiId(pCiId);
        p.setPNsId(pNsId);
        p.setPClassId(pClassId);
        p.setPGoid(pGoid);
        p.setPCiName(pCiName);
        p.setPComments(pComments);
        p.setPStateId(pStateId);
        p.setPLastRfcId(pLastRfcId);
        p.setPCreatedBy(pCreatedBy);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.cm_create_ops_action</code>
     */
    public static void cmCreateOpsAction(Configuration configuration, String pActionName, Long pOpsProcId, Long pCiId, String pStateName, Integer pExecOrder, Boolean pCritical, String pExtraInfo, String pArglist, String pPayload) {
        CmCreateOpsAction p = new CmCreateOpsAction();
        p.setPActionName(pActionName);
        p.setPOpsProcId(pOpsProcId);
        p.setPCiId(pCiId);
        p.setPStateName(pStateName);
        p.setPExecOrder(pExecOrder);
        p.setPCritical(pCritical);
        p.setPExtraInfo(pExtraInfo);
        p.setPArglist(pArglist);
        p.setPPayload(pPayload);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.cm_create_ops_procedure</code>
     */
    public static void cmCreateOpsProcedure(Configuration configuration, Long pProcedureId, String pProcedureName, Long pCiId, String pStateName, String pArglist, String pCreatedBy, String pDefinition, Long pProcCiId) {
        CmCreateOpsProcedure p = new CmCreateOpsProcedure();
        p.setPProcedureId(pProcedureId);
        p.setPProcedureName(pProcedureName);
        p.setPCiId(pCiId);
        p.setPStateName(pStateName);
        p.setPArglist(pArglist);
        p.setPCreatedBy(pCreatedBy);
        p.setPDefinition(pDefinition);
        p.setPProcCiId(pProcCiId);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.cm_create_relation</code>
     */
    public static void cmCreateRelation1(Configuration configuration, Long pCiRelationId, Long pNsId, Long pFromCiId, Integer pRelationId, Long pToCiId, String pRelGoid, String pComments, Integer pStateId) {
        CmCreateRelation1 p = new CmCreateRelation1();
        p.setPCiRelationId(pCiRelationId);
        p.setPNsId(pNsId);
        p.setPFromCiId(pFromCiId);
        p.setPRelationId(pRelationId);
        p.setPToCiId(pToCiId);
        p.setPRelGoid(pRelGoid);
        p.setPComments(pComments);
        p.setPStateId(pStateId);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.cm_create_relation</code>
     */
    public static void cmCreateRelation2(Configuration configuration, Long pCiRelationId, Long pNsId, Long pFromCiId, Integer pRelationId, Long pToCiId, String pRelGoid, String pComments, Integer pStateId, Long pLastRfcId) {
        CmCreateRelation2 p = new CmCreateRelation2();
        p.setPCiRelationId(pCiRelationId);
        p.setPNsId(pNsId);
        p.setPFromCiId(pFromCiId);
        p.setPRelationId(pRelationId);
        p.setPToCiId(pToCiId);
        p.setPRelGoid(pRelGoid);
        p.setPComments(pComments);
        p.setPStateId(pStateId);
        p.setPLastRfcId(pLastRfcId);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.cm_delete_alt_namespace</code>
     */
    public static Long cmDeleteAltNamespace(Configuration configuration, Long pNsId, Long pCiId) {
        CmDeleteAltNamespace f = new CmDeleteAltNamespace();
        f.setPNsId(pNsId);
        f.setPCiId(pCiId);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>kloopzcm.cm_delete_alt_namespace</code> as a field.
     */
    public static Field<Long> cmDeleteAltNamespace(Long pNsId, Long pCiId) {
        CmDeleteAltNamespace f = new CmDeleteAltNamespace();
        f.setPNsId(pNsId);
        f.setPCiId(pCiId);

        return f.asField();
    }

    /**
     * Get <code>kloopzcm.cm_delete_alt_namespace</code> as a field.
     */
    public static Field<Long> cmDeleteAltNamespace(Field<Long> pNsId, Field<Long> pCiId) {
        CmDeleteAltNamespace f = new CmDeleteAltNamespace();
        f.setPNsId(pNsId);
        f.setPCiId(pCiId);

        return f.asField();
    }

    /**
     * Call <code>kloopzcm.cm_delete_ci</code>
     */
    public static void cmDeleteCi1(Configuration configuration, Long pCiId, Boolean pDelete4real) {
        CmDeleteCi1 p = new CmDeleteCi1();
        p.setPCiId(pCiId);
        p.setPDelete4real(pDelete4real);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.cm_delete_ci</code>
     */
    public static void cmDeleteCi2(Configuration configuration, Long pCiId, Boolean pDelete4real, String pDeletedBy) {
        CmDeleteCi2 p = new CmDeleteCi2();
        p.setPCiId(pCiId);
        p.setPDelete4real(pDelete4real);
        p.setPDeletedBy(pDeletedBy);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.cm_delete_ci</code>
     */
    public static void cmDeleteCi3(Configuration configuration, Long pCiId, Long pLastRfcId, Boolean pDelete4real, String pDeletedBy) {
        CmDeleteCi3 p = new CmDeleteCi3();
        p.setPCiId(pCiId);
        p.setPLastRfcId(pLastRfcId);
        p.setPDelete4real(pDelete4real);
        p.setPDeletedBy(pDeletedBy);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.cm_delete_relation</code>
     */
    public static void cmDeleteRelation(Configuration configuration, Long pCiRelationId, Boolean pDelete4real) {
        CmDeleteRelation p = new CmDeleteRelation();
        p.setPCiRelationId(pCiRelationId);
        p.setPDelete4real(pDelete4real);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.cm_is_opened_release_for_ci</code>
     */
    public static Boolean cmIsOpenedReleaseForCi(Configuration configuration, Long pCiId) {
        CmIsOpenedReleaseForCi f = new CmIsOpenedReleaseForCi();
        f.setPCiId(pCiId);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>kloopzcm.cm_is_opened_release_for_ci</code> as a field.
     */
    public static Field<Boolean> cmIsOpenedReleaseForCi(Long pCiId) {
        CmIsOpenedReleaseForCi f = new CmIsOpenedReleaseForCi();
        f.setPCiId(pCiId);

        return f.asField();
    }

    /**
     * Get <code>kloopzcm.cm_is_opened_release_for_ci</code> as a field.
     */
    public static Field<Boolean> cmIsOpenedReleaseForCi(Field<Long> pCiId) {
        CmIsOpenedReleaseForCi f = new CmIsOpenedReleaseForCi();
        f.setPCiId(pCiId);

        return f.asField();
    }

    /**
     * Call <code>kloopzcm.cm_is_ops_procedure_active_for_ci</code>
     */
    public static Boolean cmIsOpsProcedureActiveForCi(Configuration configuration, Long pCiId) {
        CmIsOpsProcedureActiveForCi f = new CmIsOpsProcedureActiveForCi();
        f.setPCiId(pCiId);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>kloopzcm.cm_is_ops_procedure_active_for_ci</code> as a field.
     */
    public static Field<Boolean> cmIsOpsProcedureActiveForCi(Long pCiId) {
        CmIsOpsProcedureActiveForCi f = new CmIsOpsProcedureActiveForCi();
        f.setPCiId(pCiId);

        return f.asField();
    }

    /**
     * Get <code>kloopzcm.cm_is_ops_procedure_active_for_ci</code> as a field.
     */
    public static Field<Boolean> cmIsOpsProcedureActiveForCi(Field<Long> pCiId) {
        CmIsOpsProcedureActiveForCi f = new CmIsOpsProcedureActiveForCi();
        f.setPCiId(pCiId);

        return f.asField();
    }

    /**
     * Call <code>kloopzcm.cm_update_ci</code>
     */
    public static void cmUpdateCi1(Configuration configuration, Long pCiId, String pCiName, String pComments, Integer pStateId, String pUpdatedBy) {
        CmUpdateCi1 p = new CmUpdateCi1();
        p.setPCiId(pCiId);
        p.setPCiName(pCiName);
        p.setPComments(pComments);
        p.setPStateId(pStateId);
        p.setPUpdatedBy(pUpdatedBy);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.cm_update_ci</code>
     */
    public static void cmUpdateCi2(Configuration configuration, Long pCiId, String pCiName, String pComments, Integer pStateId, Long pLastRfcId, String pUpdatedBy) {
        CmUpdateCi2 p = new CmUpdateCi2();
        p.setPCiId(pCiId);
        p.setPCiName(pCiName);
        p.setPComments(pComments);
        p.setPStateId(pStateId);
        p.setPLastRfcId(pLastRfcId);
        p.setPUpdatedBy(pUpdatedBy);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.cm_update_ci_attribute</code>
     */
    public static void cmUpdateCiAttribute(Configuration configuration, Long pCiAttrId, String pDfValue, String pDjValue, String pOwner, String pComments) {
        CmUpdateCiAttribute p = new CmUpdateCiAttribute();
        p.setPCiAttrId(pCiAttrId);
        p.setPDfValue(pDfValue);
        p.setPDjValue(pDjValue);
        p.setPOwner(pOwner);
        p.setPComments(pComments);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.cm_update_ops_action_state</code>
     */
    public static void cmUpdateOpsActionState(Configuration configuration, Long pActionId, String pState) {
        CmUpdateOpsActionState p = new CmUpdateOpsActionState();
        p.setPActionId(pActionId);
        p.setPState(pState);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.cm_update_ops_procedure_state</code>
     */
    public static void cmUpdateOpsProcedureState(Configuration configuration, Long pProcId, String pState) {
        CmUpdateOpsProcedureState p = new CmUpdateOpsProcedureState();
        p.setPProcId(pProcId);
        p.setPState(pState);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.cm_update_rel</code>
     */
    public static void cmUpdateRel(Configuration configuration, Long pRelId, String pComments, Integer pStateId, Long pLastRfcId) {
        CmUpdateRel p = new CmUpdateRel();
        p.setPRelId(pRelId);
        p.setPComments(pComments);
        p.setPStateId(pStateId);
        p.setPLastRfcId(pLastRfcId);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.cm_update_rel_attribute</code>
     */
    public static void cmUpdateRelAttribute(Configuration configuration, Long pCiRelAttrId, String pDfValue, String pDjValue, String pOwner, String pComments) {
        CmUpdateRelAttribute p = new CmUpdateRelAttribute();
        p.setPCiRelAttrId(pCiRelAttrId);
        p.setPDfValue(pDfValue);
        p.setPDjValue(pDjValue);
        p.setPOwner(pOwner);
        p.setPComments(pComments);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.cm_vac_ns</code>
     */
    public static void cmVacNs1(Configuration configuration, Long pNsId) {
        CmVacNs1 p = new CmVacNs1();
        p.setPNsId(pNsId);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.cm_vac_ns</code>
     */
    public static void cmVacNs2(Configuration configuration, Long pNsId, String pUser) {
        CmVacNs2 p = new CmVacNs2();
        p.setPNsId(pNsId);
        p.setPUser(pUser);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.cms_acquire_lock</code>
     */
    public static Boolean cmsAcquireLock(Configuration configuration, String pLockName, String pLockedBy, Integer pStaleTimeout) {
        CmsAcquireLock f = new CmsAcquireLock();
        f.setPLockName(pLockName);
        f.setPLockedBy(pLockedBy);
        f.setPStaleTimeout(pStaleTimeout);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>kloopzcm.cms_acquire_lock</code> as a field.
     */
    public static Field<Boolean> cmsAcquireLock(String pLockName, String pLockedBy, Integer pStaleTimeout) {
        CmsAcquireLock f = new CmsAcquireLock();
        f.setPLockName(pLockName);
        f.setPLockedBy(pLockedBy);
        f.setPStaleTimeout(pStaleTimeout);

        return f.asField();
    }

    /**
     * Get <code>kloopzcm.cms_acquire_lock</code> as a field.
     */
    public static Field<Boolean> cmsAcquireLock(Field<String> pLockName, Field<String> pLockedBy, Field<Integer> pStaleTimeout) {
        CmsAcquireLock f = new CmsAcquireLock();
        f.setPLockName(pLockName);
        f.setPLockedBy(pLockedBy);
        f.setPStaleTimeout(pStaleTimeout);

        return f.asField();
    }

    /**
     * Call <code>kloopzcm.cms_set_var</code>
     */
    public static void cmsSetVar1(Configuration configuration, String pVarName, String pVarValue, String pUpdatedBy) {
        CmsSetVar1 p = new CmsSetVar1();
        p.setPVarName(pVarName);
        p.setPVarValue(pVarValue);
        p.setPUpdatedBy(pUpdatedBy);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.cms_set_var</code>
     */
    public static void cmsSetVar2(Configuration configuration, String pVarName, String pVarValue, String pCriteria, String pUpdatedBy) {
        CmsSetVar2 p = new CmsSetVar2();
        p.setPVarName(pVarName);
        p.setPVarValue(pVarValue);
        p.setPCriteria(pCriteria);
        p.setPUpdatedBy(pUpdatedBy);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.copy_over_auto_flags</code>
     */
    public static void copyOverAutoFlags(Configuration configuration) {
        CopyOverAutoFlags p = new CopyOverAutoFlags();

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_brush_exec_order</code>
     */
    public static void djBrushExecOrder(Configuration configuration, Long pReleaseId) {
        DjBrushExecOrder p = new DjBrushExecOrder();
        p.setPReleaseId(pReleaseId);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_cancel_deployment</code>
     */
    public static void djCancelDeployment1(Configuration configuration, Long pDeploymentId, String pUpdatedBy, String pDesc) {
        DjCancelDeployment1 p = new DjCancelDeployment1();
        p.setPDeploymentId(pDeploymentId);
        p.setPUpdatedBy(pUpdatedBy);
        p.setPDesc(pDesc);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_cancel_deployment</code>
     */
    public static void djCancelDeployment2(Configuration configuration, Long pDeploymentId, String pUpdatedBy, String pDesc, String pComments) {
        DjCancelDeployment2 p = new DjCancelDeployment2();
        p.setPDeploymentId(pDeploymentId);
        p.setPUpdatedBy(pUpdatedBy);
        p.setPDesc(pDesc);
        p.setPComments(pComments);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_commit_release</code>
     */
    public static void djCommitRelease(Configuration configuration, Long pReleaseId, Boolean pSetDfValue, Integer pNewCiStateId, Boolean pDelete4real, String pCommitedBy, String pDesc) {
        DjCommitRelease p = new DjCommitRelease();
        p.setPReleaseId(pReleaseId);
        p.setPSetDfValue(pSetDfValue);
        p.setPNewCiStateId(pNewCiStateId);
        p.setPDelete4real(pDelete4real);
        p.setPCommitedBy(pCommitedBy);
        p.setPDesc(pDesc);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_commit_release_cis</code>
     */
    public static void djCommitReleaseCis(Configuration configuration, Long pReleaseId, Boolean pSetDfValue, Integer pNewCiStateId, Boolean pDelete4real) {
        DjCommitReleaseCis p = new DjCommitReleaseCis();
        p.setPReleaseId(pReleaseId);
        p.setPSetDfValue(pSetDfValue);
        p.setPNewCiStateId(pNewCiStateId);
        p.setPDelete4real(pDelete4real);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_commit_release_relations</code>
     */
    public static void djCommitReleaseRelations(Configuration configuration, Long pReleaseId, Boolean pSetDfValue, Integer pNewCiStateId, Boolean pDelete4real) {
        DjCommitReleaseRelations p = new DjCommitReleaseRelations();
        p.setPReleaseId(pReleaseId);
        p.setPSetDfValue(pSetDfValue);
        p.setPNewCiStateId(pNewCiStateId);
        p.setPDelete4real(pDelete4real);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_complete_deployment</code>
     */
    public static void djCompleteDeployment(Configuration configuration, Long pDeploymentId) {
        DjCompleteDeployment p = new DjCompleteDeployment();
        p.setPDeploymentId(pDeploymentId);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_create_dpmt_approval</code>
     */
    public static Long djCreateDpmtApproval(Configuration configuration, Long pDpmtId, Long pGovernCiId, String pGovernCi, Integer pExpiresIn) {
        DjCreateDpmtApproval p = new DjCreateDpmtApproval();
        p.setPDpmtId(pDpmtId);
        p.setPGovernCiId(pGovernCiId);
        p.setPGovernCi(pGovernCi);
        p.setPExpiresIn(pExpiresIn);

        p.execute(configuration);
        return p.getOutApprovalId();
    }

    /**
     * Call <code>kloopzcm.dj_create_release</code>
     */
    public static void djCreateRelease1(Configuration configuration, Long pReleaseId, Long pNsId, Long pParentReleaseId, String pReleaseName, String pCreatedBy, Long pReleaseStateId, String pDescription, String pRevision) {
        DjCreateRelease1 p = new DjCreateRelease1();
        p.setPReleaseId(pReleaseId);
        p.setPNsId(pNsId);
        p.setPParentReleaseId(pParentReleaseId);
        p.setPReleaseName(pReleaseName);
        p.setPCreatedBy(pCreatedBy);
        p.setPReleaseStateId(pReleaseStateId);
        p.setPDescription(pDescription);
        p.setPRevision(pRevision);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_create_release</code>
     */
    public static void djCreateRelease2(Configuration configuration, Long pReleaseId, Long pNsId, Long pParentReleaseId, String pReleaseName, String pCreatedBy, Integer pReleaseStateId, String pReleaseType, String pDescription, Integer pRevision) {
        DjCreateRelease2 p = new DjCreateRelease2();
        p.setPReleaseId(pReleaseId);
        p.setPNsId(pNsId);
        p.setPParentReleaseId(pParentReleaseId);
        p.setPReleaseName(pReleaseName);
        p.setPCreatedBy(pCreatedBy);
        p.setPReleaseStateId(pReleaseStateId);
        p.setPReleaseType(pReleaseType);
        p.setPDescription(pDescription);
        p.setPRevision(pRevision);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_create_rfc_ci</code>
     */
    public static void djCreateRfcCi(Configuration configuration, Long pRfcId, Long pReleaseId, Long pCiId, Long pNsId, Integer pClassId, String pCiName, String pCiGoid, Integer pActionId, Integer pExecOrder, Long pLastRfcId, String pComments, String pCreatedBy) {
        DjCreateRfcCi p = new DjCreateRfcCi();
        p.setPRfcId(pRfcId);
        p.setPReleaseId(pReleaseId);
        p.setPCiId(pCiId);
        p.setPNsId(pNsId);
        p.setPClassId(pClassId);
        p.setPCiName(pCiName);
        p.setPCiGoid(pCiGoid);
        p.setPActionId(pActionId);
        p.setPExecOrder(pExecOrder);
        p.setPLastRfcId(pLastRfcId);
        p.setPComments(pComments);
        p.setPCreatedBy(pCreatedBy);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_create_rfc_relation</code>
     */
    public static void djCreateRfcRelation(Configuration configuration, Long pRfcId, Long pReleaseId, Long pNsId, Long pCiRelationId, Long pFromRfcId, Long pFromCiId, Integer pRelationId, String pRelationGoid, Long pToRfcId, Long pToCiId, Integer pActionId, Integer pExecOrder, Long pLastRfcId, String pComments, String pCreatedBy) {
        DjCreateRfcRelation p = new DjCreateRfcRelation();
        p.setPRfcId(pRfcId);
        p.setPReleaseId(pReleaseId);
        p.setPNsId(pNsId);
        p.setPCiRelationId(pCiRelationId);
        p.setPFromRfcId(pFromRfcId);
        p.setPFromCiId(pFromCiId);
        p.setPRelationId(pRelationId);
        p.setPRelationGoid(pRelationGoid);
        p.setPToRfcId(pToRfcId);
        p.setPToCiId(pToCiId);
        p.setPActionId(pActionId);
        p.setPExecOrder(pExecOrder);
        p.setPLastRfcId(pLastRfcId);
        p.setPComments(pComments);
        p.setPCreatedBy(pCreatedBy);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_delete_release</code>
     */
    public static void djDeleteRelease(Configuration configuration, Long pReleaseId) {
        DjDeleteRelease p = new DjDeleteRelease();
        p.setPReleaseId(pReleaseId);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_deploy_release</code>
     */
    public static Long djDeployRelease1(Configuration configuration, Long pReleaseId, String pCreatedBy, String pComments) {
        DjDeployRelease1 p = new DjDeployRelease1();
        p.setPReleaseId(pReleaseId);
        p.setPCreatedBy(pCreatedBy);
        p.setPComments(pComments);

        p.execute(configuration);
        return p.getOutDeploymentId();
    }

    /**
     * Call <code>kloopzcm.dj_deploy_release</code>
     */
    public static Long djDeployRelease2(Configuration configuration, Long pReleaseId, String pCreatedBy, String pDescription, String pComments, String pOps) {
        DjDeployRelease2 p = new DjDeployRelease2();
        p.setPReleaseId(pReleaseId);
        p.setPCreatedBy(pCreatedBy);
        p.setPDescription(pDescription);
        p.setPComments(pComments);
        p.setPOps(pOps);

        p.execute(configuration);
        return p.getOutDeploymentId();
    }

    /**
     * Call <code>kloopzcm.dj_deploy_release</code>
     */
    public static Long djDeployRelease3(Configuration configuration, Long pReleaseId, String pState, String pCreatedBy, String pDescription, String pComments, String pOps) {
        DjDeployRelease3 p = new DjDeployRelease3();
        p.setPReleaseId(pReleaseId);
        p.setPState(pState);
        p.setPCreatedBy(pCreatedBy);
        p.setPDescription(pDescription);
        p.setPComments(pComments);
        p.setPOps(pOps);

        p.execute(configuration);
        return p.getOutDeploymentId();
    }

    /**
     * Call <code>kloopzcm.dj_deploy_release</code>
     */
    public static Long djDeployRelease4(Configuration configuration, Long pReleaseId, String pState, String pCreatedBy, String pDescription, String pComments, String pOps, String pAutoPauseExecOrders) {
        DjDeployRelease4 p = new DjDeployRelease4();
        p.setPReleaseId(pReleaseId);
        p.setPState(pState);
        p.setPCreatedBy(pCreatedBy);
        p.setPDescription(pDescription);
        p.setPComments(pComments);
        p.setPOps(pOps);
        p.setPAutoPauseExecOrders(pAutoPauseExecOrders);

        p.execute(configuration);
        return p.getOutDeploymentId();
    }

    /**
     * Call <code>kloopzcm.dj_deploy_release</code>
     */
    public static Long djDeployRelease5(Configuration configuration, Long pReleaseId, String pState, String pCreatedBy, String pDescription, String pComments, String pOps, Long pFlags, String pAutoPauseExecOrders) {
        DjDeployRelease5 p = new DjDeployRelease5();
        p.setPReleaseId(pReleaseId);
        p.setPState(pState);
        p.setPCreatedBy(pCreatedBy);
        p.setPDescription(pDescription);
        p.setPComments(pComments);
        p.setPOps(pOps);
        p.setPFlags(pFlags);
        p.setPAutoPauseExecOrders(pAutoPauseExecOrders);

        p.execute(configuration);
        return p.getOutDeploymentId();
    }

    /**
     * Call <code>kloopzcm.dj_dpmt_approve</code>
     */
    public static void djDpmtApprove(Configuration configuration, Long pApprovalId, String pUpdatedBy, Integer pExpiresIn, String pComments) {
        DjDpmtApprove p = new DjDpmtApprove();
        p.setPApprovalId(pApprovalId);
        p.setPUpdatedBy(pUpdatedBy);
        p.setPExpiresIn(pExpiresIn);
        p.setPComments(pComments);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_dpmt_upd_approvla_rec</code>
     */
    public static void djDpmtUpdApprovlaRec(Configuration configuration, Long pApprovalId, String pUpdatedBy, Integer pExpiresIn, String pComments, String pState) {
        DjDpmtUpdApprovlaRec p = new DjDpmtUpdApprovlaRec();
        p.setPApprovalId(pApprovalId);
        p.setPUpdatedBy(pUpdatedBy);
        p.setPExpiresIn(pExpiresIn);
        p.setPComments(pComments);
        p.setPState(pState);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_promote_rfc_ci</code>
     */
    public static void djPromoteRfcCi(Configuration configuration, Long pRfcId, Boolean pSetDfValue, Integer pNewCiStateId, Long pDpmtId) {
        DjPromoteRfcCi p = new DjPromoteRfcCi();
        p.setPRfcId(pRfcId);
        p.setPSetDfValue(pSetDfValue);
        p.setPNewCiStateId(pNewCiStateId);
        p.setPDpmtId(pDpmtId);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_promote_rfc_relations</code>
     */
    public static void djPromoteRfcRelations(Configuration configuration, Long pRfcId, Boolean pSetDfValue, Integer pNewCiStateId) {
        DjPromoteRfcRelations p = new DjPromoteRfcRelations();
        p.setPRfcId(pRfcId);
        p.setPSetDfValue(pSetDfValue);
        p.setPNewCiStateId(pNewCiStateId);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_reset_failed_records</code>
     */
    public static void djResetFailedRecords(Configuration configuration, Long pDeploymentId) {
        DjResetFailedRecords p = new DjResetFailedRecords();
        p.setPDeploymentId(pDeploymentId);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_retry_deployment</code>
     */
    public static void djRetryDeployment1(Configuration configuration, Long pDeploymentId, String pUpdatedBy, String pDesc) {
        DjRetryDeployment1 p = new DjRetryDeployment1();
        p.setPDeploymentId(pDeploymentId);
        p.setPUpdatedBy(pUpdatedBy);
        p.setPDesc(pDesc);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_retry_deployment</code>
     */
    public static void djRetryDeployment2(Configuration configuration, Long pDeploymentId, String pUpdatedBy, String pDesc, String pComments) {
        DjRetryDeployment2 p = new DjRetryDeployment2();
        p.setPDeploymentId(pDeploymentId);
        p.setPUpdatedBy(pUpdatedBy);
        p.setPDesc(pDesc);
        p.setPComments(pComments);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_rm_rfc_ci</code>
     */
    public static void djRmRfcCi(Configuration configuration, Long pRfcId) {
        DjRmRfcCi p = new DjRmRfcCi();
        p.setPRfcId(pRfcId);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_rm_rfc_rel</code>
     */
    public static void djRmRfcRel(Configuration configuration, Long pRfcId) {
        DjRmRfcRel p = new DjRmRfcRel();
        p.setPRfcId(pRfcId);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_rm_rfcs</code>
     */
    public static Integer djRmRfcs(Configuration configuration, String pNsPath) {
        DjRmRfcs f = new DjRmRfcs();
        f.setPNsPath(pNsPath);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>kloopzcm.dj_rm_rfcs</code> as a field.
     */
    public static Field<Integer> djRmRfcs(String pNsPath) {
        DjRmRfcs f = new DjRmRfcs();
        f.setPNsPath(pNsPath);

        return f.asField();
    }

    /**
     * Get <code>kloopzcm.dj_rm_rfcs</code> as a field.
     */
    public static Field<Integer> djRmRfcs(Field<String> pNsPath) {
        DjRmRfcs f = new DjRmRfcs();
        f.setPNsPath(pNsPath);

        return f.asField();
    }

    /**
     * Call <code>kloopzcm.dj_upd_deployment</code>
     */
    public static void djUpdDeployment1(Configuration configuration, Long pDeploymentId, String pState, String pUpdatedBy, String pDesc, String pProcessId) {
        DjUpdDeployment1 p = new DjUpdDeployment1();
        p.setPDeploymentId(pDeploymentId);
        p.setPState(pState);
        p.setPUpdatedBy(pUpdatedBy);
        p.setPDesc(pDesc);
        p.setPProcessId(pProcessId);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_upd_deployment</code>
     */
    public static void djUpdDeployment2(Configuration configuration, Long pDeploymentId, String pState, String pUpdatedBy, String pDesc, String pComments, String pProcessId) {
        DjUpdDeployment2 p = new DjUpdDeployment2();
        p.setPDeploymentId(pDeploymentId);
        p.setPState(pState);
        p.setPUpdatedBy(pUpdatedBy);
        p.setPDesc(pDesc);
        p.setPComments(pComments);
        p.setPProcessId(pProcessId);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_upd_deployment</code>
     */
    public static void djUpdDeployment3(Configuration configuration, Long pDeploymentId, String pState, String pUpdatedBy, String pDesc, String pComments, String pProcessId, String pAutoPauseExecOrders) {
        DjUpdDeployment3 p = new DjUpdDeployment3();
        p.setPDeploymentId(pDeploymentId);
        p.setPState(pState);
        p.setPUpdatedBy(pUpdatedBy);
        p.setPDesc(pDesc);
        p.setPComments(pComments);
        p.setPProcessId(pProcessId);
        p.setPAutoPauseExecOrders(pAutoPauseExecOrders);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_upd_deployment</code>
     */
    public static void djUpdDeployment4(Configuration configuration, Long pDeploymentId, String pState, String pUpdatedBy, String pDesc, String pComments, String pProcessId, String pAutoPauseExecOrders, Long pFlags) {
        DjUpdDeployment4 p = new DjUpdDeployment4();
        p.setPDeploymentId(pDeploymentId);
        p.setPState(pState);
        p.setPUpdatedBy(pUpdatedBy);
        p.setPDesc(pDesc);
        p.setPComments(pComments);
        p.setPProcessId(pProcessId);
        p.setPAutoPauseExecOrders(pAutoPauseExecOrders);
        p.setPFlags(pFlags);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_upd_deployment_state</code>
     */
    public static void djUpdDeploymentState(Configuration configuration, Long pDeploymentId, String pState, String pUpdatedBy, String pDesc) {
        DjUpdDeploymentState p = new DjUpdDeploymentState();
        p.setPDeploymentId(pDeploymentId);
        p.setPState(pState);
        p.setPUpdatedBy(pUpdatedBy);
        p.setPDesc(pDesc);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_upd_dpmt_record_state</code>
     */
    public static void djUpdDpmtRecordState(Configuration configuration, Long pDpmtRfcId, String pState, String pComments) {
        DjUpdDpmtRecordState p = new DjUpdDpmtRecordState();
        p.setPDpmtRfcId(pDpmtRfcId);
        p.setPState(pState);
        p.setPComments(pComments);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_update_release</code>
     */
    public static void djUpdateRelease(Configuration configuration, Long pReleaseId, Long pParentReleaseId, String pReleaseName, Integer pReleaseStateId, String pCommitedBy, Integer pRevision, String pDesc) {
        DjUpdateRelease p = new DjUpdateRelease();
        p.setPReleaseId(pReleaseId);
        p.setPParentReleaseId(pParentReleaseId);
        p.setPReleaseName(pReleaseName);
        p.setPReleaseStateId(pReleaseStateId);
        p.setPCommitedBy(pCommitedBy);
        p.setPRevision(pRevision);
        p.setPDesc(pDesc);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_update_rfc_ci</code>
     */
    public static void djUpdateRfcCi1(Configuration configuration, Long pRfcId, String pCiName, Integer pExecOrder, String pComments, String pUpdatedBy) {
        DjUpdateRfcCi1 p = new DjUpdateRfcCi1();
        p.setPRfcId(pRfcId);
        p.setPCiName(pCiName);
        p.setPExecOrder(pExecOrder);
        p.setPComments(pComments);
        p.setPUpdatedBy(pUpdatedBy);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_update_rfc_ci</code>
     */
    public static void djUpdateRfcCi2(Configuration configuration, Long pRfcId, String pCiName, Integer pExecOrder, String pComments, String pUpdatedBy, Long pReleaseId) {
        DjUpdateRfcCi2 p = new DjUpdateRfcCi2();
        p.setPRfcId(pRfcId);
        p.setPCiName(pCiName);
        p.setPExecOrder(pExecOrder);
        p.setPComments(pComments);
        p.setPUpdatedBy(pUpdatedBy);
        p.setPReleaseId(pReleaseId);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_update_rfc_relation</code>
     */
    public static void djUpdateRfcRelation1(Configuration configuration, Long pRfcId, Integer pExecOrder, String pComments, String pUpdatedBy) {
        DjUpdateRfcRelation1 p = new DjUpdateRfcRelation1();
        p.setPRfcId(pRfcId);
        p.setPExecOrder(pExecOrder);
        p.setPComments(pComments);
        p.setPUpdatedBy(pUpdatedBy);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_update_rfc_relation</code>
     */
    public static void djUpdateRfcRelation2(Configuration configuration, Long pRfcId, Integer pExecOrder, String pComments, String pUpdatedBy, Long pReleaseId) {
        DjUpdateRfcRelation2 p = new DjUpdateRfcRelation2();
        p.setPRfcId(pRfcId);
        p.setPExecOrder(pExecOrder);
        p.setPComments(pComments);
        p.setPUpdatedBy(pUpdatedBy);
        p.setPReleaseId(pReleaseId);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.dj_upsert_rfc_ci_attr</code>
     */
    public static Long djUpsertRfcCiAttr(Configuration configuration, Long pRfcId, Integer pAttributeId, String pNewAttrValue, String pOwner, String pComments) {
        DjUpsertRfcCiAttr p = new DjUpsertRfcCiAttr();
        p.setPRfcId(pRfcId);
        p.setPAttributeId(pAttributeId);
        p.setPNewAttrValue(pNewAttrValue);
        p.setPOwner(pOwner);
        p.setPComments(pComments);

        p.execute(configuration);
        return p.getPRfcAttrId();
    }

    /**
     * Call <code>kloopzcm.dj_upsert_rfc_rel_attr</code>
     */
    public static Long djUpsertRfcRelAttr(Configuration configuration, Long pRfcId, Integer pAttributeId, String pNewAttrValue, String pOwner, String pComments) {
        DjUpsertRfcRelAttr p = new DjUpsertRfcRelAttr();
        p.setPRfcId(pRfcId);
        p.setPAttributeId(pAttributeId);
        p.setPNewAttrValue(pNewAttrValue);
        p.setPOwner(pOwner);
        p.setPComments(pComments);

        p.execute(configuration);
        return p.getPRfcAttrId();
    }

    /**
     * Call <code>kloopzcm.force_complete_dpmt</code>
     */
    public static void forceCompleteDpmt(Configuration configuration, Long pDpmtId) {
        ForceCompleteDpmt p = new ForceCompleteDpmt();
        p.setPDpmtId(pDpmtId);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.md_add_class_action</code>
     */
    public static Integer mdAddClassAction1(Configuration configuration, Integer pClassId, String pActionName, Boolean pIsInheritable, String pDescr) {
        MdAddClassAction1 p = new MdAddClassAction1();
        p.setPClassId(pClassId);
        p.setPActionName(pActionName);
        p.setPIsInheritable(pIsInheritable);
        p.setPDescr(pDescr);

        p.execute(configuration);
        return p.getOutActionId();
    }

    /**
     * Call <code>kloopzcm.md_add_class_action</code>
     */
    public static Integer mdAddClassAction2(Configuration configuration, Integer pClassId, String pActionName, Boolean pIsInheritable, String pDescr, String pArgs) {
        MdAddClassAction2 p = new MdAddClassAction2();
        p.setPClassId(pClassId);
        p.setPActionName(pActionName);
        p.setPIsInheritable(pIsInheritable);
        p.setPDescr(pDescr);
        p.setPArgs(pArgs);

        p.execute(configuration);
        return p.getOutActionId();
    }

    /**
     * Call <code>kloopzcm.md_add_class_attribute</code>
     */
    public static Integer mdAddClassAttribute1(Configuration configuration, Integer pClassId, String pAttributeName, String pDataType, Boolean pIsMandatory, Boolean pIsInheritable, Boolean pIsEncrypted, Boolean pForceOnDependent, String pDefaultValue, String pValueFormat, String pDescr) {
        MdAddClassAttribute1 p = new MdAddClassAttribute1();
        p.setPClassId(pClassId);
        p.setPAttributeName(pAttributeName);
        p.setPDataType(pDataType);
        p.setPIsMandatory(pIsMandatory);
        p.setPIsInheritable(pIsInheritable);
        p.setPIsEncrypted(pIsEncrypted);
        p.setPForceOnDependent(pForceOnDependent);
        p.setPDefaultValue(pDefaultValue);
        p.setPValueFormat(pValueFormat);
        p.setPDescr(pDescr);

        p.execute(configuration);
        return p.getOutAttributeId();
    }

    /**
     * Call <code>kloopzcm.md_add_class_attribute</code>
     */
    public static Integer mdAddClassAttribute2(Configuration configuration, Integer pClassId, String pAttributeName, String pDataType, Boolean pIsMandatory, Boolean pIsInheritable, Boolean pIsEncrypted, Boolean pIsImmutable, Boolean pForceOnDependent, String pDefaultValue, String pValueFormat, String pDescr) {
        MdAddClassAttribute2 p = new MdAddClassAttribute2();
        p.setPClassId(pClassId);
        p.setPAttributeName(pAttributeName);
        p.setPDataType(pDataType);
        p.setPIsMandatory(pIsMandatory);
        p.setPIsInheritable(pIsInheritable);
        p.setPIsEncrypted(pIsEncrypted);
        p.setPIsImmutable(pIsImmutable);
        p.setPForceOnDependent(pForceOnDependent);
        p.setPDefaultValue(pDefaultValue);
        p.setPValueFormat(pValueFormat);
        p.setPDescr(pDescr);

        p.execute(configuration);
        return p.getOutAttributeId();
    }

    /**
     * Call <code>kloopzcm.md_add_relation_attribute</code>
     */
    public static Integer mdAddRelationAttribute(Configuration configuration, Integer pRelId, String pAttributeName, String pDataType, Boolean pIsMandatory, String pDefaultValue, String pValueFormat, String pDescr) {
        MdAddRelationAttribute p = new MdAddRelationAttribute();
        p.setPRelId(pRelId);
        p.setPAttributeName(pAttributeName);
        p.setPDataType(pDataType);
        p.setPIsMandatory(pIsMandatory);
        p.setPDefaultValue(pDefaultValue);
        p.setPValueFormat(pValueFormat);
        p.setPDescr(pDescr);

        p.execute(configuration);
        return p.getOutAttributeId();
    }

    /**
     * Call <code>kloopzcm.md_add_relation_target</code>
     */
    public static Integer mdAddRelationTarget(Configuration configuration, Integer pRelId, Integer pFromClassId, Integer pToClassId, Boolean pIsStrong, String pLinkType, String pDescr) {
        MdAddRelationTarget p = new MdAddRelationTarget();
        p.setPRelId(pRelId);
        p.setPFromClassId(pFromClassId);
        p.setPToClassId(pToClassId);
        p.setPIsStrong(pIsStrong);
        p.setPLinkType(pLinkType);
        p.setPDescr(pDescr);

        p.execute(configuration);
        return p.getOutLinkId();
    }

    /**
     * Call <code>kloopzcm.md_create_class</code>
     */
    public static void mdCreateClass1(Configuration configuration, Integer pClassId, String pClassName, String pShortClassName, Integer pSuperClassId, String pImpl, Boolean pIsNamespace, String pAccessLevel, String pDescr, String pFormat) {
        MdCreateClass1 p = new MdCreateClass1();
        p.setPClassId(pClassId);
        p.setPClassName(pClassName);
        p.setPShortClassName(pShortClassName);
        p.setPSuperClassId(pSuperClassId);
        p.setPImpl(pImpl);
        p.setPIsNamespace(pIsNamespace);
        p.setPAccessLevel(pAccessLevel);
        p.setPDescr(pDescr);
        p.setPFormat(pFormat);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.md_create_class</code>
     */
    public static void mdCreateClass2(Configuration configuration, Integer pClassId, String pClassName, String pShortClassName, Integer pSuperClassId, String pImpl, Boolean pIsNamespace, Integer pFlags, String pAccessLevel, String pDescr, String pFormat) {
        MdCreateClass2 p = new MdCreateClass2();
        p.setPClassId(pClassId);
        p.setPClassName(pClassName);
        p.setPShortClassName(pShortClassName);
        p.setPSuperClassId(pSuperClassId);
        p.setPImpl(pImpl);
        p.setPIsNamespace(pIsNamespace);
        p.setPFlags(pFlags);
        p.setPAccessLevel(pAccessLevel);
        p.setPDescr(pDescr);
        p.setPFormat(pFormat);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.md_create_relation</code>
     */
    public static void mdCreateRelation(Configuration configuration, Integer pRelId, String pRelName, String pShortRelName, String pDescr) {
        MdCreateRelation p = new MdCreateRelation();
        p.setPRelId(pRelId);
        p.setPRelName(pRelName);
        p.setPShortRelName(pShortRelName);
        p.setPDescr(pDescr);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.md_delete_class</code>
     */
    public static void mdDeleteClass(Configuration configuration, Integer pClassId, Boolean pDeleteAll) {
        MdDeleteClass p = new MdDeleteClass();
        p.setPClassId(pClassId);
        p.setPDeleteAll(pDeleteAll);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.md_delete_class_action</code>
     */
    public static void mdDeleteClassAction(Configuration configuration, Integer pActionId) {
        MdDeleteClassAction p = new MdDeleteClassAction();
        p.setPActionId(pActionId);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.md_delete_class_attribute</code>
     */
    public static void mdDeleteClassAttribute(Configuration configuration, Integer pAttributeId, Boolean pDeleteAll) {
        MdDeleteClassAttribute p = new MdDeleteClassAttribute();
        p.setPAttributeId(pAttributeId);
        p.setPDeleteAll(pDeleteAll);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.md_delete_relation</code>
     */
    public static void mdDeleteRelation(Configuration configuration, Integer pRelId, Boolean pDeleteAll) {
        MdDeleteRelation p = new MdDeleteRelation();
        p.setPRelId(pRelId);
        p.setPDeleteAll(pDeleteAll);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.md_delete_relation_attribute</code>
     */
    public static void mdDeleteRelationAttribute(Configuration configuration, Integer pAttrId, Boolean pDeleteAll) {
        MdDeleteRelationAttribute p = new MdDeleteRelationAttribute();
        p.setPAttrId(pAttrId);
        p.setPDeleteAll(pDeleteAll);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.md_delete_relation_target</code>
     */
    public static void mdDeleteRelationTarget(Configuration configuration, Integer pLinkId) {
        MdDeleteRelationTarget p = new MdDeleteRelationTarget();
        p.setPLinkId(pLinkId);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.md_update_class</code>
     */
    public static void mdUpdateClass1(Configuration configuration, Integer pClassId, String pShortClassName, Integer pSuperClassId, String pImpl, Boolean pIsNamespace, String pAccessLevel, String pDescr, String pFormat) {
        MdUpdateClass1 p = new MdUpdateClass1();
        p.setPClassId(pClassId);
        p.setPShortClassName(pShortClassName);
        p.setPSuperClassId(pSuperClassId);
        p.setPImpl(pImpl);
        p.setPIsNamespace(pIsNamespace);
        p.setPAccessLevel(pAccessLevel);
        p.setPDescr(pDescr);
        p.setPFormat(pFormat);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.md_update_class</code>
     */
    public static void mdUpdateClass2(Configuration configuration, Integer pClassId, String pShortClassName, Integer pSuperClassId, String pImpl, Boolean pIsNamespace, Integer pFlags, String pAccessLevel, String pDescr, String pFormat) {
        MdUpdateClass2 p = new MdUpdateClass2();
        p.setPClassId(pClassId);
        p.setPShortClassName(pShortClassName);
        p.setPSuperClassId(pSuperClassId);
        p.setPImpl(pImpl);
        p.setPIsNamespace(pIsNamespace);
        p.setPFlags(pFlags);
        p.setPAccessLevel(pAccessLevel);
        p.setPDescr(pDescr);
        p.setPFormat(pFormat);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.md_update_class_action</code>
     */
    public static void mdUpdateClassAction1(Configuration configuration, Integer pActionId, String pActionName, Boolean pIsInheritable, String pDescr) {
        MdUpdateClassAction1 p = new MdUpdateClassAction1();
        p.setPActionId(pActionId);
        p.setPActionName(pActionName);
        p.setPIsInheritable(pIsInheritable);
        p.setPDescr(pDescr);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.md_update_class_action</code>
     */
    public static void mdUpdateClassAction2(Configuration configuration, Integer pActionId, String pActionName, Boolean pIsInheritable, String pDescr, String pArgs) {
        MdUpdateClassAction2 p = new MdUpdateClassAction2();
        p.setPActionId(pActionId);
        p.setPActionName(pActionName);
        p.setPIsInheritable(pIsInheritable);
        p.setPDescr(pDescr);
        p.setPArgs(pArgs);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.md_update_class_attribute</code>
     */
    public static void mdUpdateClassAttribute1(Configuration configuration, Integer pAttributeId, String pAttributeName, String pDataType, Boolean pIsMandatory, Boolean pIsInheritable, Boolean pIsEncrypted, Boolean pForceOnDependent, String pDefaultValue, String pValueFormat, String pDescr) {
        MdUpdateClassAttribute1 p = new MdUpdateClassAttribute1();
        p.setPAttributeId(pAttributeId);
        p.setPAttributeName(pAttributeName);
        p.setPDataType(pDataType);
        p.setPIsMandatory(pIsMandatory);
        p.setPIsInheritable(pIsInheritable);
        p.setPIsEncrypted(pIsEncrypted);
        p.setPForceOnDependent(pForceOnDependent);
        p.setPDefaultValue(pDefaultValue);
        p.setPValueFormat(pValueFormat);
        p.setPDescr(pDescr);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.md_update_class_attribute</code>
     */
    public static void mdUpdateClassAttribute2(Configuration configuration, Integer pAttributeId, String pAttributeName, String pDataType, Boolean pIsMandatory, Boolean pIsInheritable, Boolean pIsEncrypted, Boolean pIsImmutable, Boolean pForceOnDependent, String pDefaultValue, String pValueFormat, String pDescr) {
        MdUpdateClassAttribute2 p = new MdUpdateClassAttribute2();
        p.setPAttributeId(pAttributeId);
        p.setPAttributeName(pAttributeName);
        p.setPDataType(pDataType);
        p.setPIsMandatory(pIsMandatory);
        p.setPIsInheritable(pIsInheritable);
        p.setPIsEncrypted(pIsEncrypted);
        p.setPIsImmutable(pIsImmutable);
        p.setPForceOnDependent(pForceOnDependent);
        p.setPDefaultValue(pDefaultValue);
        p.setPValueFormat(pValueFormat);
        p.setPDescr(pDescr);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.md_update_relation</code>
     */
    public static void mdUpdateRelation(Configuration configuration, Integer pRelId, String pRelName, String pShortRelName, String pDescr) {
        MdUpdateRelation p = new MdUpdateRelation();
        p.setPRelId(pRelId);
        p.setPRelName(pRelName);
        p.setPShortRelName(pShortRelName);
        p.setPDescr(pDescr);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.md_update_relation_attribute</code>
     */
    public static void mdUpdateRelationAttribute(Configuration configuration, Integer pAttributeId, Integer pRelId, String pAttributeName, String pDataType, Boolean pIsMandatory, String pDefaultValue, String pValueFormat, String pDescr) {
        MdUpdateRelationAttribute p = new MdUpdateRelationAttribute();
        p.setPAttributeId(pAttributeId);
        p.setPRelId(pRelId);
        p.setPAttributeName(pAttributeName);
        p.setPDataType(pDataType);
        p.setPIsMandatory(pIsMandatory);
        p.setPDefaultValue(pDefaultValue);
        p.setPValueFormat(pValueFormat);
        p.setPDescr(pDescr);

        p.execute(configuration);
    }

    /**
     * Call <code>kloopzcm.ns_create_namespace</code>
     */
    public static Long nsCreateNamespace(Configuration configuration, String pNsPath) {
        NsCreateNamespace p = new NsCreateNamespace();
        p.setPNsPath(pNsPath);

        p.execute(configuration);
        return p.getOutNsId();
    }

    /**
     * Call <code>kloopzcm.ns_delete_namespace</code>
     */
    public static void nsDeleteNamespace(Configuration configuration, String pNsPath) {
        NsDeleteNamespace p = new NsDeleteNamespace();
        p.setPNsPath(pNsPath);

        p.execute(configuration);
    }
}
