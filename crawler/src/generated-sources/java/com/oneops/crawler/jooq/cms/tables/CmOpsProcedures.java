/*
 * This file is generated by jOOQ.
*/
package com.oneops.crawler.jooq.cms.tables;


import com.oneops.crawler.jooq.cms.Indexes;
import com.oneops.crawler.jooq.cms.Keys;
import com.oneops.crawler.jooq.cms.Kloopzcm;
import com.oneops.crawler.jooq.cms.tables.records.CmOpsProceduresRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CmOpsProcedures extends TableImpl<CmOpsProceduresRecord> {

    private static final long serialVersionUID = 2078742949;

    /**
     * The reference instance of <code>kloopzcm.cm_ops_procedures</code>
     */
    public static final CmOpsProcedures CM_OPS_PROCEDURES = new CmOpsProcedures();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CmOpsProceduresRecord> getRecordType() {
        return CmOpsProceduresRecord.class;
    }

    /**
     * The column <code>kloopzcm.cm_ops_procedures.ops_proc_id</code>.
     */
    public final TableField<CmOpsProceduresRecord, Long> OPS_PROC_ID = createField("ops_proc_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>kloopzcm.cm_ops_procedures.ci_id</code>.
     */
    public final TableField<CmOpsProceduresRecord, Long> CI_ID = createField("ci_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>kloopzcm.cm_ops_procedures.proc_name</code>.
     */
    public final TableField<CmOpsProceduresRecord, String> PROC_NAME = createField("proc_name", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>kloopzcm.cm_ops_procedures.proc_ci_id</code>.
     */
    public final TableField<CmOpsProceduresRecord, Long> PROC_CI_ID = createField("proc_ci_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>kloopzcm.cm_ops_procedures.created_by</code>.
     */
    public final TableField<CmOpsProceduresRecord, String> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>kloopzcm.cm_ops_procedures.arglist</code>.
     */
    public final TableField<CmOpsProceduresRecord, String> ARGLIST = createField("arglist", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>kloopzcm.cm_ops_procedures.definition</code>.
     */
    public final TableField<CmOpsProceduresRecord, String> DEFINITION = createField("definition", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>kloopzcm.cm_ops_procedures.state_id</code>.
     */
    public final TableField<CmOpsProceduresRecord, Integer> STATE_ID = createField("state_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>kloopzcm.cm_ops_procedures.created</code>.
     */
    public final TableField<CmOpsProceduresRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>kloopzcm.cm_ops_procedures.updated</code>.
     */
    public final TableField<CmOpsProceduresRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>kloopzcm.cm_ops_procedures</code> table reference
     */
    public CmOpsProcedures() {
        this(DSL.name("cm_ops_procedures"), null);
    }

    /**
     * Create an aliased <code>kloopzcm.cm_ops_procedures</code> table reference
     */
    public CmOpsProcedures(String alias) {
        this(DSL.name(alias), CM_OPS_PROCEDURES);
    }

    /**
     * Create an aliased <code>kloopzcm.cm_ops_procedures</code> table reference
     */
    public CmOpsProcedures(Name alias) {
        this(alias, CM_OPS_PROCEDURES);
    }

    private CmOpsProcedures(Name alias, Table<CmOpsProceduresRecord> aliased) {
        this(alias, aliased, null);
    }

    private CmOpsProcedures(Name alias, Table<CmOpsProceduresRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Kloopzcm.KLOOPZCM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CM_OPS_PROC_CI_ID_IDX, Indexes.CM_OPS_PROC_CIID_NM_CREATED, Indexes.CM_OPS_PROC_STATE_ID_IDX, Indexes.CM_OPS_PROCEDURES_CI_PROC_IDX, Indexes.CM_OPS_PROCEDURES_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CmOpsProceduresRecord> getPrimaryKey() {
        return Keys.CM_OPS_PROCEDURES_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CmOpsProceduresRecord>> getKeys() {
        return Arrays.<UniqueKey<CmOpsProceduresRecord>>asList(Keys.CM_OPS_PROCEDURES_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CmOpsProceduresRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CmOpsProceduresRecord, ?>>asList(Keys.CM_OPS_PROCEDURES__CM_OPS_PROCEDURES_CI_FK, Keys.CM_OPS_PROCEDURES__CM_OPS_PROCEDURES_ST_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CmOpsProcedures as(String alias) {
        return new CmOpsProcedures(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CmOpsProcedures as(Name alias) {
        return new CmOpsProcedures(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CmOpsProcedures rename(String name) {
        return new CmOpsProcedures(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CmOpsProcedures rename(Name name) {
        return new CmOpsProcedures(name, null);
    }
}
